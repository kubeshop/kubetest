"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[3969],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||i;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},75174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={},a="Using a private certificate authority (CA)",l={unversionedId:"articles/private-ca",id:"articles/private-ca",title:"Using a private certificate authority (CA)",description:"Installations which must serve Testkube endpoints or Git repositories using",source:"@site/docs/articles/private-ca.md",sourceDirName:"articles",slug:"/articles/private-ca",permalink:"/articles/private-ca",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/private-ca.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Emitting Kubernetes Events",permalink:"/articles/k8s-events"},next:{title:"Using Istio",permalink:"/articles/istio"}},s={},c=[{value:"Configurations",id:"configurations",level:2},{value:"Pulling from Git repositories",id:"pulling-from-git-repositories",level:2},{value:"Prebuilt executors",id:"prebuilt-executors",level:2},{value:"Container executors",id:"container-executors",level:2},{value:"Workflows",id:"workflows",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-a-private-certificate-authority-ca"},"Using a private certificate authority (CA)"),(0,o.kt)("p",null,"Installations which must serve Testkube endpoints or Git repositories using\ncertificates signed by a private CA should use this guide to make sure Testkube\ncomponents trust the private CA."),(0,o.kt)("h2",{id:"configurations"},"Configurations"),(0,o.kt)("p",null,"To get started we need to create a bundle containing all the CA certificates we\nwould like the installation to trust."),(0,o.kt)("p",null,"After that you will need to create a secret with the CA bundle under the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ca.crt")," key in the namespace(s) with the Helm releases both for the agent and\nthe enterprise control plane."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl -n <namespace> create secret generic <secret name> --from-file=ca.crt=<path to the file with the ca bundle>\n")),(0,o.kt)("p",null,"Configure the following value in the ",(0,o.kt)("inlineCode",{parentName:"p"},"testkube-enterprise")," chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n    customCaSecretRef: <secret name>\n")),(0,o.kt)("p",null,"Configure the following values in the ",(0,o.kt)("inlineCode",{parentName:"p"},"testkube")," chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n    testWorkflows:\n        globalTemplate:\n            enabled: true\n            spec:\n                pod:\n                    volumes:\n                        - name: testkube-enterprise-ca\n                          secret:\n                              secretName: <secret name>\n                              defaultMode: 420\n                container:\n                    env:\n                        - name: SSL_CERT_DIR\n                          value: /etc/testkube/certs/\n                        - name: GIT_SSL_CAINFO\n                          value: /etc/testkube/certs/testkube-custom-ca.pem\n                    volumeMounts:\n                        - name: testkube-enterprise-ca\n                          mountPath: /etc/testkube/certs/testkube-custom-ca.pem\n                          subPath: ca.crt\ntestkube-api:\n    cloud:\n        tls:\n            customCaSecretRef: <secret name>\n")),(0,o.kt)("h2",{id:"pulling-from-git-repositories"},"Pulling from Git repositories"),(0,o.kt)("p",null,"If you would like to be able to pull Git data from repositories served both by\nGitHub (or any other host) and your own Git servers which utilize private CA\nsigned certificates you will need to bundle the root CA certificates for those\nhosts by concatenating them into one CA bundle."),(0,o.kt)("h2",{id:"prebuilt-executors"},"Prebuilt executors"),(0,o.kt)("p",null,"Should work out of the box with ",(0,o.kt)("inlineCode",{parentName:"p"},"customCaSecretRef")," set."),(0,o.kt)("h2",{id:"container-executors"},"Container executors"),(0,o.kt)("p",null,"Pulling from Git repositories should work with ",(0,o.kt)("inlineCode",{parentName:"p"},"customCaSecretRef")," set, but if\nthe container executing the test must trust your private CA you will need to\nbake your CAs certification into the right location inside your image."),(0,o.kt)("h2",{id:"workflows"},"Workflows"),(0,o.kt)("p",null,"With the global template specified above you should be able to both mount and\ntrust the CA bundle for pulling from Git and processing the results of the test\nexecutions."),(0,o.kt)("p",null,"However, if the containers specified as part of the workflow require the trust\nof your private CA then you will need to configure the container/pod in a\nsimilar way as shown in the global template to mount the CA bundle to the right\nlocation and/or if necessary specify an environment variable."))}p.isMDXComponent=!0}}]);