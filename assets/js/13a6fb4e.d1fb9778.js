"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[7010],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?s.createElement(v,o(o({ref:t},l),{},{components:n})):s.createElement(v,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var s=n(87462),r=(n(67294),n(3905));const a={},o="Emitting Standard CDEvents",i={unversionedId:"articles/cd-events",id:"articles/cd-events",title:"Emitting Standard CDEvents",description:"CDEvents is a common specification for Continuous Delivery events. Testkube is a proud supporter of this specification and we have added in the specification support for Testing Events to be release on v0.3.0 of the spec.",source:"@site/docs/articles/cd-events.md",sourceDirName:"articles",slug:"/articles/cd-events",permalink:"/articles/cd-events",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/cd-events.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating Your First Test",permalink:"/articles/creating-first-test"},next:{title:"Integrating with Slack",permalink:"/articles/slack-integration"}},c={},p=[{value:"Step 1 - Enable CDEvents",id:"step-1---enable-cdevents",level:2},{value:"Step 2 - Test Emmiting CDEvents",id:"step-2---test-emmiting-cdevents",level:2},{value:"Reference",id:"reference",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"emitting-standard-cdevents"},"Emitting Standard CDEvents"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cdevents.dev/"},"CDEvents")," is a common specification for Continuous Delivery events. Testkube is a proud supporter of this specification and we have added in the specification support for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cdevents/spec/blob/main/testing-events.md"},"Testing Events")," to be release on v0.3.0 of the spec."),(0,r.kt)("p",null,"As of the 1.12 release, Testkube can emit standard CDEvents to a webhook endpoint. This can be used to integrate with any CD tool that supports the CDEvents standard."),(0,r.kt)("h2",{id:"step-1---enable-cdevents"},"Step 1 - Enable CDEvents"),(0,r.kt)("p",null,"To enable CDEvents, you need to set the following Helm\nvalues:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"helm upgrade \\\n  --install \\\n  --create-namespace \\\n  --namespace testkube \\\n  testkube \\\n  kubeshop/testkube \\\n  --set testkube-api.cdeventsTarget=https://YOUR_WEBHOOK_URL\n")),(0,r.kt)("p",null,"For testing purposes you can use ",(0,r.kt)("a",{parentName:"p",href:"https://webhook.site/"},"webhook.site")," to get a webhook URL."),(0,r.kt)("h2",{id:"step-2---test-emmiting-cdevents"},"Step 2 - Test Emmiting CDEvents"),(0,r.kt)("p",null,"To test emitting CDEvents, create a sample test with Testkube and run it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'cat << EOF | > curl-test.json\n{\n  "command": [\n    "curl",\n    "https://example.com"\n  ],\n  "expected_status": "200"\n}\nEOF\n\ntestkube create test --name test-cdevents --type curl/test -f curl-test.json\n\ntestkube run test test-cdevents\n')),(0,r.kt)("p",null,"Check the webhook sink to see the CDEvent emitted by Testkube. An event like the following should have been emmitted: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "context": {\n    "version": "0.2.0",\n    "id": "85e4cef0-e5bf-4bfd-9e62-5b227867b064",\n    "source": "cluster56c26628bece30eb07f01a64daaa3f27",\n    "type": "dev.cdevents.testcaserun.finished.0.1.0",\n    "timestamp": "2023-06-08T11:30:22.30535521Z"\n  },\n  "subject": {\n    "id": "test-cdevents-7",\n    "source": "cluster56c26628bece30eb07f01a64daaa3f27",\n    "type": "testCaseRun",\n    "content": {\n      "environment": {\n        "id": "testkube",\n        "source": "cluster56c26628bece30eb07f01a64daaa3f27"\n      },\n      "outcome": "pass",\n      "testCase": {\n        "id": "test-cdevents",\n        "type": "functional",\n        "uri": "/tests/executions/test-cdevents"\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("p",null,"For more information about CDEvents, please visit the ",(0,r.kt)("a",{parentName:"p",href:"https://cdevents.dev/"},"CDEvents")," website."),(0,r.kt)("p",null,"To know more about the Testing Events specification, please visit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cdevents/spec/blob/main/testing-events.md"},"Testing Events")," page."))}u.isMDXComponent=!0}}]);