"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[8556],{3905:(e,t,s)=>{s.d(t,{Zo:()=>i,kt:()=>p});var n=s(67294);function a(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function l(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){a(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function u(e,t){if(null==e)return{};var s,n,a=function(e,t){if(null==e)return{};var s,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(a[s]=e[s]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var c=n.createContext({}),o=function(e){var t=n.useContext(c),s=t;return e&&(s="function"==typeof e?e(t):l(l({},t),e)),s},i=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var s=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),h=o(s),p=a,m=h["".concat(c,".").concat(p)]||h[p]||d[p]||r;return s?n.createElement(m,l(l({ref:t},i),{},{components:s})):n.createElement(m,l({ref:t},i))}));function p(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=s.length,l=new Array(r);l[0]=h;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var o=2;o<r;o++)l[o]=s[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,s)}h.displayName="MDXCreateElement"},85162:(e,t,s)=>{s.d(t,{Z:()=>l});var n=s(67294),a=s(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:s,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:s},t)}},74866:(e,t,s)=>{s.d(t,{Z:()=>y});var n=s(87462),a=s(67294),r=s(86010),l=s(12466),u=s(76775),c=s(91980),o=s(67392),i=s(50012);function d(e){return function(e){var t;return(null==(t=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:s,attributes:n,default:a}}=e;return{value:t,label:s,attributes:n,default:a}}))}function h(e){const{values:t,children:s}=e;return(0,a.useMemo)((()=>{const e=t??d(s);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,s])}function p(e){let{value:t,tabValues:s}=e;return s.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:s}=e;const n=(0,u.k6)(),r=function(e){let{queryString:t=!1,groupId:s}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:t,groupId:s});return[(0,c._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function b(e){const{defaultValue:t,queryString:s=!1,groupId:n}=e,r=h(e),[l,u]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=s.find((e=>e.default))??s[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,o]=m({queryString:s,groupId:n}),[d,b]=function(e){let{groupId:t}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,i.Nk)(s);return[n,(0,a.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:n}),f=(()=>{const e=c??d;return p({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{f&&u(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);u(e),o(e),b(e)}),[o,b,r]),tabValues:r}}var f=s(72389);const g="tabList__CuJ",k="tabItem_LNqP";function T(e){let{className:t,block:s,selectedValue:u,selectValue:c,tabValues:o}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),h=e=>{const t=e.currentTarget,s=i.indexOf(t),n=o[s].value;n!==u&&(d(t),c(n))},p=e=>{var t;let s=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;s=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;s=i[t]??i[i.length-1];break}}null==(t=s)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":s},t)},o.map((e=>{let{value:t,label:s,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:e=>i.push(e),onKeyDown:p,onClick:h},l,{className:(0,r.Z)("tabs__item",k,null==l?void 0:l.className,{"tabs__item--active":u===t})}),s??t)})))}function v(e){let{lazy:t,children:s,selectedValue:n}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function S(e){const t=b(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",g)},a.createElement(T,(0,n.Z)({},e,t)),a.createElement(v,(0,n.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return a.createElement(S,(0,n.Z)({key:String(t)},e))}},12392:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>u,metadata:()=>o,toc:()=>d});var n=s(87462),a=(s(67294),s(3905)),r=s(74866),l=s(85162);const u={},c="Scheduling Tests",o={unversionedId:"articles/scheduling-tests",id:"articles/scheduling-tests",title:"Scheduling Tests",description:"Create a Scheduled Test or Test Suite from the Testkube Dashboard",source:"@site/docs/articles/scheduling-tests.mdx",sourceDirName:"articles",slug:"/articles/scheduling-tests",permalink:"/articles/scheduling-tests",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/articles/scheduling-tests.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Secret Variables",permalink:"/articles/adding-tests-secrets"},next:{title:"Triggers",permalink:"/articles/test-triggers"}},i={},d=[{value:"Create a Scheduled Test or Test Suite from the Testkube Dashboard",id:"create-a-scheduled-test-or-test-suite-from-the-testkube-dashboard",level:2},{value:"Scheduling Architecture",id:"scheduling-architecture",level:2},{value:"Scheduling Architecture",id:"scheduling-architecture-1",level:2},{value:"Create a Test with a Schedule",id:"create-a-test-with-a-schedule",level:2},{value:"Getting Scheduled Test Results",id:"getting-scheduled-test-results",level:2},{value:"Create a Test Suite with a Schedule",id:"create-a-test-suite-with-a-schedule",level:2},{value:"Getting Scheduled Test Suite Results",id:"getting-scheduled-test-suite-results",level:2}],h={toc:d};function p(e){let{components:t,...u}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,u,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"scheduling-tests"},"Scheduling Tests"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"dashboard",label:"Dashboard",default:!0,mdxType:"TabItem"},(0,a.kt)("h2",{id:"create-a-scheduled-test-or-test-suite-from-the-testkube-dashboard"},"Create a Scheduled Test or Test Suite from the Testkube Dashboard"),(0,a.kt)("p",null,"In order to run Tests and Test Suites on a regular basis, we support a scheduling mechanism for these objects.\nCRDs both for Tests and Test Suites contain a ",(0,a.kt)("strong",{parentName:"p"},"schedule")," field used to define rules for launching them in time.\nTestkube's schedule data format is the same that is used to define Kubernetes Cron jobs (check Wikipedia Cron format for details ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cron"},"https://en.wikipedia.org/wiki/Cron"),")."),(0,a.kt)("h2",{id:"scheduling-architecture"},"Scheduling Architecture"),(0,a.kt)("p",null,"Testkube uses the scheduling engine from Kubernetes Cron jobs.\nIn fact, for each scheduled Test or Test Suite, a special cron job is created from this ",(0,a.kt)("a",{parentName:"p",href:"ttps://github.com/kubeshop/helm-charts/tree/main/charts/testkube-operator/cronjob-template.yml"},"template"),"."),(0,a.kt)("p",null,"Technically, it is a callback to the Testkube API server method, launching either Test or Test Suite execution."),(0,a.kt)("p",null,"This works similarly to scheduled Test and Test Suite executions done by external scheduling platforms."),(0,a.kt)("p",null,"In the Testkube Dashboard, when you have selected a Test or Test Suite, in the ",(0,a.kt)("strong",{parentName:"p"},"Settings")," tab, click on ",(0,a.kt)("strong",{parentName:"p"},"Scheduling")," to create a schedule for the Test or Test Suite."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Schedule Tests",src:s(83817).Z,width:"2808",height:"1268"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Schedule Tests Test Suites",src:s(24740).Z,width:"2874",height:"1570"}))),(0,a.kt)(l.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,a.kt)("p",null,"In order to run Tests and Test Suites on a regular basis, we support a scheduling mechanism for these objects.\nCRDs both for Tests and Test Suites contain a ",(0,a.kt)("strong",{parentName:"p"},"schedule")," field used to define rules for launching them in time.\nTestkube's schedule data format is the same that is used to define Kubernetes Cron jobs (check ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cron"},"Wikipedia Cron format")," for details."),(0,a.kt)("h2",{id:"scheduling-architecture-1"},"Scheduling Architecture"),(0,a.kt)("p",null,"Testkube uses the scheduling engine from Kubernetes Cron jobs.\nIn fact, for each scheduled Test or Test Suite, a special cron job is created from this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/helm-charts/tree/main/charts/testkube-operator/cronjob-template.yml"},"template"),"."),(0,a.kt)("p",null,"Technically, it is a callback to the Testkube API server method, launching either Test or Test Suite execution.\nThis works similarly to scheduled Test and Test Suite executions done by external scheduling platforms."),(0,a.kt)("h2",{id:"create-a-test-with-a-schedule"},"Create a Test with a Schedule"),(0,a.kt)("p",null,"Let's create a test with a required schedule using Testkube CLI command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'kubectl testkube create test --file test/postman/TODO.postman_collection.json --name scheduled-test --schedule="*/1 * * * *"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Detected test type postman/collection\nTest created  / scheduled-test \ud83e\udd47\n")),(0,a.kt)("p",null,"We successfully created a scheduled test and can check the list of the available tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl testkube get tests\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"  NAME              | TYPE               | CREATED                       | LABELS | SCHEDULE    | STATUS | EXECUTION ID\n+-------------------+--------------------+-------------------------------+--------+-------------+--------+--------------------------+\n  scheduled-test    | postman/collection | 2022-04-13 12:37:40 +0000 UTC |        | */1 * * * * |        |\n")),(0,a.kt)("p",null,"The scheduled test was created and successfully scheduled for execution."),(0,a.kt)("p",null,"Let's check a Cron job connected to this test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl get cronjobs -A\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"NAMESPACE   NAME                   SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE\ntestkube    scheduled-test-tests   */1 * * * *   False     1        42s           3m22s\n")),(0,a.kt)("p",null,"The Cron job for this test was successfully created and the test was executed."),(0,a.kt)("p",null,"To the check Cron job details:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl describe cronjob scheduled-test-tests -n testkube\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},'Name:                          scheduled-test-tests\nNamespace:                     testkube\nLabels:                        testkube=tests\nAnnotations:                   <none>\nSchedule:                      */1 * * * *\nConcurrency Policy:            Forbid\nSuspend:                       False\nSuccessful Job History Limit:  3\nFailed Job History Limit:      1\nStarting Deadline Seconds:     <unset>\nSelector:                      <unset>\nParallelism:                   <unset>\nCompletions:                   <unset>\nPod Template:\n  Labels:  <none>\n  Containers:\n   curlimage:\n    Image:      curlimages/curl\n    Port:       <none>\n    Host Port:  <none>\n    Command:\n      sh\n      -c\n    Args:\n      curl -X POST -H "Content-Type: application/json" -d \'{}\' "http://testkube-api-server:8088/v1/tests/scheduled-test/executions?callback=true"\n    Environment:     <none>\n    Mounts:          <none>\n  Volumes:           <none>\nLast Schedule Time:  Wed, 13 Apr 2022 15:50:00 +0300\nActive Jobs:         scheduled-test-tests-27497570\nEvents:\n  Type    Reason            Age                  From                Message\n  ----    ------            ----                 ----                -------\n  Normal  SuccessfulCreate  5m41s                cronjob-controller  Created job scheduled-test-tests-2749757\n')),(0,a.kt)("p",null,"As mentioned above, we have a scheduled callback for launching our test."),(0,a.kt)("h2",{id:"getting-scheduled-test-results"},"Getting Scheduled Test Results"),(0,a.kt)("p",null,"Now we can check if the test is executed every minute per the schedule we provided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl testkube get execution\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"  ID                       | NAME                | TYPE               | STATUS  | LABELS\n+--------------------------+---------------------+--------------------+---------+--------+\n  6256c98f418062706814e1fc | scheduled-test      | postman/collection | passed  |\n  6256c953418062706814e1fa | scheduled-test      | postman/collection | passed  |\n  6256c91e418062706814e1f8 | scheduled-test      | postman/collection | passed  |\n  6256c8db418062706814e1f6 | scheduled-test      | postman/collection | passed  |\n  6256c89f418062706814e1f4 | scheduled-test      | postman/collection | passed  |\n  6256c885418062706814e1f2 | scheduled-test      | postman/collection | passed  |\n  6256c87e418062706814e1f0 | scheduled-test      | postman/collection | passed  |\n")),(0,a.kt)("p",null,"The test is successfully executed on the stated schedule."),(0,a.kt)("h2",{id:"create-a-test-suite-with-a-schedule"},"Create a Test Suite with a Schedule"),(0,a.kt)("p",null,"Let's create a Test Suite with a required schedule using the Testkube CLI command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'cat test/suites/testsuite.json | kubectl testkube create testsuite --name scheduled-testsuite --schedule="*/1 * * * *"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"TestSuite created scheduled-testsuite \ud83e\udd47\n")),(0,a.kt)("p",null,"We successfully created a scheduled Test Suite and can view a list of the available Test Suites:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl testkube get testsuites\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"  NAME                | DESCRIPTION            | STEPS | LABELS | SCHEDULE    | STATUS | EXECUTION ID\n+---------------------+------------------------+-------+--------+-------------+--------+--------------+\n  scheduled-testsuite | Run test several times |     2 |        | */1 * * * * |        |\n")),(0,a.kt)("p",null,"The scheduled Test Suite was created and successfully scheduled for execution.\nWe will skip the Cron job details, they are fully similar to test one described above."),(0,a.kt)("h2",{id:"getting-scheduled-test-suite-results"},"Getting Scheduled Test Suite Results"),(0,a.kt)("p",null,"The Test Suite is executed every minute per the schedule we provided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl testkube get tse\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"  ID                       | TEST SUITE NAME     | EXECUTION NAME                             | STATUS | STEPS | LABELS\n+--------------------------+---------------------+--------------------------------------------+--------+-------+--------+\n  6256ce3f418062706814e210 | scheduled-testsuite | scheduled-testsuite.abnormally-in-lark     | passed |     2 |\n  6256ce04418062706814e20c | scheduled-testsuite | scheduled-testsuite.kindly-evolved-primate | passed |     2 |\n  6256cdcc418062706814e208 | scheduled-testsuite | scheduled-testsuite.formerly-champion-dodo | passed |     2 |\n")),(0,a.kt)("p",null,"The Test Suite is successfully executed on the stated schedule."))))}p.isMDXComponent=!0},24740:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/schedule-test-suites-66934be59582b07955e080a8589d1002.png"},83817:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/schedule-tests-b12544d25c21a8d7ba22aacfd2b88329.png"}}]);