"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[1320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},23612:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(67294),l=n(86010),r=n(35281),i=n(95999);const o="admonition_LlT9",s="admonitionHeading_tbUL",p="admonitionIcon_kALy",u="admonitionContent_S0QG";const d={note:{infimaClassName:"secondary",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:a.createElement(i.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:a.createElement(i.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:a.createElement(i.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},c={secondary:"note",important:"info",success:"tip",warning:"danger"};function m(e){const{mdxAdmonitionTitle:t,rest:n}=function(e){const t=a.Children.toArray(e),n=t.find((e=>{var t;return a.isValidElement(e)&&"mdxAdmonitionTitle"===(null==(t=e.props)?void 0:t.mdxType)})),l=a.createElement(a.Fragment,null,t.filter((e=>e!==n)));return{mdxAdmonitionTitle:n,rest:l}}(e.children);return{...e,title:e.title??t,children:n}}function k(e){const{children:t,type:n,title:i,icon:k}=m(e),g=function(e){const t=c[e]??e;return d[t]||(console.warn(`No admonition config found for admonition type "${t}". Using Info as fallback.`),d.info)}(n),h=i??g.label,{iconComponent:f}=g,N=k??a.createElement(f,null);return a.createElement("div",{className:(0,l.Z)(r.k.common.admonition,r.k.common.admonitionType(e.type),"alert",`alert--${g.infimaClassName}`,o)},a.createElement("div",{className:s},a.createElement("span",{className:p},N),h),a.createElement("div",{className:u},t))}},90385:(e,t,n)=>{n.r(t),n.d(t,{ExecutorInfo:()=>d,assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),l=(n(67294),n(3905)),r=n(23612);const i={},o="OWASP Zed Attack Proxy Executor",s={unversionedId:"test-types/executor-zap",id:"test-types/executor-zap",title:"OWASP Zed Attack Proxy Executor",description:"Starting from version 1.12, Testkube has a dedicated executor for running ZAP tests. All you need to do is populate a file with the necessary parameters and create a Testkube test.",source:"@site/docs/test-types/executor-zap.md",sourceDirName:"test-types",slug:"/test-types/executor-zap",permalink:"/test-types/executor-zap",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-zap.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracetest",permalink:"/test-types/executor-tracetest"},next:{title:"Prebuilt Testkube Executor",permalink:"/test-types/prebuilt-executor"}},p={},u=[{value:"<strong>Creating a ZAP Test</strong>",id:"creating-a-zap-test",level:2},{value:"<strong>Input File</strong>",id:"input-file",level:3},{value:"<strong>Config File</strong>",id:"config-file",level:3},{value:"<strong>Creating a Git-based ZAP Test</strong>",id:"creating-a-git-based-zap-test",level:2},{value:"<strong>Running a ZAP Test</strong>",id:"running-a-zap-test",level:2},{value:"<strong>Results</strong>",id:"results",level:2},{value:"<strong>References</strong>",id:"references",level:2}],d=()=>(0,l.kt)("div",null,(0,l.kt)(r.Z,{type:"info",icon:"\ud83c\udf93",title:"What is ZAP?",mdxType:"Admonition"},(0,l.kt)("ul",null,(0,l.kt)("li",null,"OWASP Zed Attack Proxy (ZAP) is a security scanner used to scan web applications."),(0,l.kt)("li",null,"It is free and open-source, and also the most widely used web app scanner in the world. It provides a high range of options for security automation.")))),c={toc:u,ExecutorInfo:d};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"owasp-zed-attack-proxy-executor"},"OWASP Zed Attack Proxy Executor"),(0,l.kt)("p",null,"Starting from version 1.12, Testkube has a dedicated executor for running ZAP tests. All you need to do is populate a file with the necessary parameters and create a Testkube test."),(0,l.kt)("p",null,"Default command for this executor is ",(0,l.kt)("inlineCode",{parentName:"p"},"<pythonScriptPath>"),", which will be calculated based on the test type."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'"zap/baseline": "./zap-baseline.py"'),(0,l.kt)("li",{parentName:"ul"},'"zap/full": "./zap-full-scan.py"'),(0,l.kt)("li",{parentName:"ul"},'"zap/api":  "./zap-api-scan.py"')),(0,l.kt)("p",null,"Default arguments for this executor command:  ","<","fileArgs",">"),(0,l.kt)("p",null,"(parameters in ","<",">"," are calculated at test execution)\nFor more information on how the underlying Docker image behaves, please consult the documentation on the ",(0,l.kt)("a",{parentName:"p",href:"https://www.zaproxy.org/docs/docker/"},"official ZAP website"),"."),(0,l.kt)("h2",{id:"creating-a-zap-test"},(0,l.kt)("strong",{parentName:"h2"},"Creating a ZAP Test")),(0,l.kt)("p",null,"The official ZAP Docker image, on which the executor was built, lets you run three types of tests: baseline, full and API scans. Depending on which of these functionalities you want to leverage, the test creation looks slightly different. Not only the type of the test (",(0,l.kt)("inlineCode",{parentName:"p"},"--type"),") needs to be specified differently, but the configuration file will also have some parameters that do not work with all types."),(0,l.kt)("p",null,"An example create test CLI command will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ kubectl testkube create test --file contrib/executor/zap/examples/zap-tk-api.yaml --type "zap/api" --name zap-api-test --copy-files contrib/executor/zap/examples/zap-tk-api.conf:zap-tk-api.conf\nTest created testkube / zap-api-test \ud83e\udd47\n')),(0,l.kt)("h3",{id:"input-file"},(0,l.kt)("strong",{parentName:"h3"},"Input File")),(0,l.kt)("p",null,"Note that this command is using files available locally. The input file ",(0,l.kt)("inlineCode",{parentName:"p"},"--file contrib/executor/zap/examples/zap-tk-api.yaml"),", will be the one defining the arguments the executable will run with. Possible values are:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable name"),(0,l.kt)("th",{parentName:"tr",align:null},"ZAP parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Baseline"),(0,l.kt)("th",{parentName:"tr",align:null},"Full"),(0,l.kt)("th",{parentName:"tr",align:null},"API"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"target"),(0,l.kt)("td",{parentName:"tr",align:null},"-t"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"config"),(0,l.kt)("td",{parentName:"tr",align:null},"-u for http ",(0,l.kt)("br",null)," -z for api ",(0,l.kt)("br",null)," -c for others"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"debug"),(0,l.kt)("td",{parentName:"tr",align:null},"-d"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"short"),(0,l.kt)("td",{parentName:"tr",align:null},"-s"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"level"),(0,l.kt)("td",{parentName:"tr",align:null},"-l"),(0,l.kt)("td",{parentName:"tr",align:null},'"PASS"'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"context"),(0,l.kt)("td",{parentName:"tr",align:null},"-n"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"-U"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delay"),(0,l.kt)("td",{parentName:"tr",align:null},"-D"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"time"),(0,l.kt)("td",{parentName:"tr",align:null},"-T"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"zap_options"),(0,l.kt)("td",{parentName:"tr",align:null},"-z"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fail_on_warn"),(0,l.kt)("td",{parentName:"tr",align:null},"-I"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ajax"),(0,l.kt)("td",{parentName:"tr",align:null},"-j"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minutes"),(0,l.kt)("td",{parentName:"tr",align:null},"-m"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"-f"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hostname"),(0,l.kt)("td",{parentName:"tr",align:null},"-O"),(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"safe"),(0,l.kt)("td",{parentName:"tr",align:null},"-S"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2713")))),(0,l.kt)("p",null,"An example file content would look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"api:\n  # -t the target API definition\n  target: https://www.example.com/openapi.json\n  # -f the API format, openapi, soap, or graphql\n  format: openapi\n  # -O the hostname to override in the (remote) OpenAPI spec\n  hostname: https://www.example.com\n  # -S safe mode this will skip the active scan and perform a baseline scan\n  safe: true\n  # -c config file\n  config: /data/uploads/zap-tk-api.conf\n  # -d show debug messages\n  debug: true\n  # -s short output\n  short: false\n  # -l minimum level to show: PASS, IGNORE, INFO, WARN or FAIL\n  level: INFO\n  # -n context file\n  # context: /data/uploads/context.conf\n  # username to use for authenticated scans\n  user: anonymous\n  # delay in seconds to wait for passive scanning\n  delay: 5\n  # max time in minutes to wait for ZAP to start and the passive scan to run\n  time: 60\n  # ZAP command line options\n  zap_options: -config aaa=bbb\n  # -I should ZAP fail on warnings\n  fail_on_warn: false\n")),(0,l.kt)("p",null,"The first line always specifies the type of the test. It can be either ",(0,l.kt)("inlineCode",{parentName:"p"},"baseline"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"full")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"api"),"."),(0,l.kt)("h3",{id:"config-file"},(0,l.kt)("strong",{parentName:"h3"},"Config File")),(0,l.kt)("p",null,"Another file that was passed in is ",(0,l.kt)("inlineCode",{parentName:"p"},"contrib/executor/zap/examples/zap-tk-api.conf"),". This one is the rule configuration file. It should look something like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# zap-api-scan rule configuration file\n# Change WARN to IGNORE to ignore rule or FAIL to fail if rule matches\n# Active scan rules set to IGNORE will not be run which will speed up the scan\n# Only the rule identifiers are used - the names are just for info\n# You can add your own messages to each rule by appending them after a tab on each line.\n0   WARN    (Directory Browsing - Active/release)\n10010   WARN    (Cookie No HttpOnly Flag - Passive/release)\n10011   WARN    (Cookie Without Secure Flag - Passive/release)\n10012   WARN    (Password Autocomplete in Browser - Passive/release)\n10015   WARN    (Incomplete or No Cache-control and Pragma HTTP Header Set - Passive/release)\n10016   WARN    (Web Browser XSS Protection Not Enabled - Passive/release)\n10017   WARN    (Cross-Domain JavaScript Source File Inclusion - Passive/release)\n10019   WARN    (Content-Type Header Missing - Passive/release)\n10020   WARN    (X-Frame-Options Header Scanner - Passive/release)\n10021   WARN    (X-Content-Type-Options Header Missing - Passive/release)\n.\n.\n.\n")),(0,l.kt)("p",null,"For additional files that should be passed in as parameter to the executor, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--copy-files")," feature when developing locally. These files will be uploaded to the path ",(0,l.kt)("inlineCode",{parentName:"p"},"/data/uploads")," by default."),(0,l.kt)("h2",{id:"creating-a-git-based-zap-test"},(0,l.kt)("strong",{parentName:"h2"},"Creating a Git-based ZAP Test")),(0,l.kt)("p",null,"For tests running on production, you should use a Git repository to keep track of the changes the test went through. When running these tests, Testkube will clone the repository every time. An example test creation command would look something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'testkube create test --git-uri https://github.com/kubeshop/testkube.git --type "zap/api" --name git-zap-api-test --executor-args "zap-api.yaml" --git-branch main --git-path contrib/executor/zap/examples\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Output:"',title:'"Output:"'},"Test created testkube / git-zap-api-test \ud83e\udd47\n")),(0,l.kt)("p",null,"Please note that for using Git-based tests, the executor is expecting the test file as the last ",(0,l.kt)("inlineCode",{parentName:"p"},"--executor-args")," argument. The path to the config file should be specified in this ",(0,l.kt)("inlineCode",{parentName:"p"},"yaml")," file."),(0,l.kt)("h2",{id:"running-a-zap-test"},(0,l.kt)("strong",{parentName:"h2"},"Running a ZAP Test")),(0,l.kt)("p",null,"Running a ZAP test using the CLI is as easy as running any other kind of test in Testkube:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl testkube run test zap-api-test\nTestkube will use the following file mappings: contrib/executor/zap/examples/zap-tk-api.conf:zap-tk-api.conf\nType:              zap/api\nName:              zap-api-test\nExecution ID:      646f8d4bc5ba4e00f169aafe\nExecution name:    zap-api-test-1\nExecution number:  1\nStatus:            running\nStart time:        2023-05-25 16:31:07.880658961 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution zap-api-test-1\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution zap-api-test-1\n")),(0,l.kt)("h2",{id:"results"},(0,l.kt)("strong",{parentName:"h2"},"Results")),(0,l.kt)("p",null,"When the test is finished running, it will have either ",(0,l.kt)("inlineCode",{parentName:"p"},"passed")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"failed")," state. To check it, run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"testkube get tests\n")),(0,l.kt)("p",null,"To get a more detailed report, you can run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"testkube get execution zap-api-test-1\n")),(0,l.kt)("p",null,"Another indicator of how the tests completed are the report files created. These are uploaded as artifacts into the object storage used by Testkube, and can be retrieved using both the Testkube CLI and the Testkube UI."),(0,l.kt)("h2",{id:"references"},(0,l.kt)("strong",{parentName:"h2"},"References")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.zaproxy.org/docs/docker"},"ZAP Docker documentation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.zaproxy.org/docs/docker/baseline-scan/"},"ZAP - Baseline Scan documentation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.zaproxy.org/docs/docker/full-scan/"},"ZAP - Full Scan documentation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.zaproxy.org/docs/docker/api-scan/"},"ZAP - API Scan documentation"))))}m.isMDXComponent=!0}}]);