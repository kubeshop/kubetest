"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[6612],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),g=a,d=m["".concat(l,".").concat(g)]||m[g]||c[g]||i;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},55616:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={},o="Guide to Deploying Testkube from private registries",s={unversionedId:"articles/deploying-from-private-registries",id:"articles/deploying-from-private-registries",title:"Guide to Deploying Testkube from private registries",description:"This guide shows how to deploy Testkube using images from private registries.",source:"@site/docs/articles/deploying-from-private-registries.md",sourceDirName:"articles",slug:"/articles/deploying-from-private-registries",permalink:"/articles/deploying-from-private-registries",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/articles/deploying-from-private-registries.md",tags:[],version:"current",frontMatter:{}},l={},p=[],u={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"guide-to-deploying-testkube-from-private-registries"},"Guide to Deploying Testkube from private registries"),(0,a.kt)("p",null,"This guide shows how to deploy Testkube using images from private registries. "),(0,a.kt)("p",null,"To start with, we need to update ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," file, populating ",(0,a.kt)("inlineCode",{parentName:"p"},"registry")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pullSecret")," parameters with a value of your private registry and a k8s secret respectively. (Please note that the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/"},"k8s secret")," should be created prior to Testkube installation.)\nThe easiest solution would be to update ",(0,a.kt)("inlineCode",{parentName:"p"},"global")," parameters, which will set a new value for ",(0,a.kt)("strong",{parentName:"p"},"all")," Testkube components, including MongoDB images:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-aidl"},'global:\n  imageRegistry: ""\n  imagePullSecrets: []\n  labels: {}\n  annotations: {}\n')),(0,a.kt)("p",null,"However, NATS chart that is part of Testkube belongs to a third party and as of now it requires passing image registry and image pull secret parameters separately. The snippet from the ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," file for NATS chart:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-aidl"},"nats:\n    imagePullSecrets: \n       - name: your-secret-name\n    nats:\n        image:\n            registry: REGISTRY_NAME \n    natsbox:\n        image:\n            registry: REGISTRY_NAME  \n    reloader:\n        image:\n            registry: REGISTRY_NAME  \n    exporter:\n        image:\n            registry: REGISTRY_NAME\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Please mind that ",(0,a.kt)("inlineCode",{parentName:"p"},"global")," parameters override all local values, so if it is required to set different registries or secret names, please use ",(0,a.kt)("inlineCode",{parentName:"p"},"registry")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pullSecret")," parameter for each Testkube service. For example ",(0,a.kt)("inlineCode",{parentName:"p"},"testkube-api"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-aidl"},'testkube-api:\n   image: \n     registry: your-registry-name\n     repository: kubeshop/testkube-api-server\n     tag: "latest"\n     pullPolicy: IfNotPresent\n     pullSecret: \n       - your-secret-name\n\n'))),(0,a.kt)("p",null,"Once the ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," is ready we may deploy Testkube to the k8s cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-aidl"},"helm repo add kubeshop https://kubeshop.github.io/helm-charts\nhelm install --create-namespace testkube kubeshop/testkube --namespace testkube --values ./path-to-values.yaml\n")))}c.isMDXComponent=!0}}]);