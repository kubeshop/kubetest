"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[2831],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>s});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},N=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,o=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),N=p(n),s=l,u=N["".concat(o,".").concat(s)]||N[s]||k[s]||r;return n?a.createElement(u,i(i({ref:e},m),{},{components:n})):a.createElement(u,i({ref:e},m))}));function s(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=N;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d.mdxType="string"==typeof t?t:l,i[1]=d;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},36055:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const r={},i="Test Workflows - Expressions",d={unversionedId:"articles/test-workflows-expressions",id:"articles/test-workflows-expressions",title:"Test Workflows - Expressions",description:"Expressions Language",source:"@site/docs/articles/test-workflows-expressions.md",sourceDirName:"articles",slug:"/articles/test-workflows-expressions",permalink:"/articles/test-workflows-expressions",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/test-workflows-expressions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Workflows Examples - Configuration",permalink:"/articles/test-workflows-examples-configuration"},next:{title:"Test Workflows Examples - Templates",permalink:"/articles/test-workflows-examples-templates"}},o={},p=[{value:"Expressions Language",id:"expressions-language",level:2},{value:"JSON-Native",id:"json-native",level:2},{value:"Math",id:"math",level:2},{value:"Operators",id:"operators",level:3},{value:"Arithmetic",id:"arithmetic",level:4},{value:"Access",id:"access",level:4},{value:"Built-in Variables",id:"built-in-variables",level:2},{value:"General Variables",id:"general-variables",level:3},{value:"Selected variables",id:"selected-variables",level:4},{value:"Contextual Variables",id:"contextual-variables",level:3},{value:"Retry Conditions",id:"retry-conditions",level:4},{value:"Matrix and Shard",id:"matrix-and-shard",level:4},{value:"Built-in Functions",id:"built-in-functions",level:2},{value:"Casting",id:"casting",level:3},{value:"General",id:"general",level:3},{value:"File System",id:"file-system",level:3}],m={toc:p};function k(t){let{components:e,...r}=t;return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"test-workflows---expressions"},"Test Workflows - Expressions"),(0,l.kt)("h2",{id:"expressions-language"},"Expressions Language"),(0,l.kt)("p",null,"We have designed a simple expressions language, that allows dynamic evaluation of different values."),(0,l.kt)("h2",{id:"json-native"},"JSON-Native"),(0,l.kt)("p",null,"It is built on JSON, so every JSON syntax is a valid expression value as well, like ",(0,l.kt)("inlineCode",{parentName:"p"},'[ "a", "b", "c" ]'),"."),(0,l.kt)("h2",{id:"math"},"Math"),(0,l.kt)("p",null,"You can do basic math easily, like ",(0,l.kt)("strong",{parentName:"p"},"config.workers * 5"),"."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Expressions",src:n(22280).Z,width:"720",height:"576"})," "),(0,l.kt)("h3",{id:"operators"},"Operators"),(0,l.kt)("h4",{id:"arithmetic"},"Arithmetic"),(0,l.kt)("p",null,"The operators have the precedence defined so the order will follow math rules. Examples:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1 + 2 * 3")," will result in ",(0,l.kt)("inlineCode",{parentName:"li"},"7")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(1 + 2) * 3")," will result in ",(0,l.kt)("inlineCode",{parentName:"li"},"9")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"2 * 3 ** 2")," will result in ",(0,l.kt)("inlineCode",{parentName:"li"},"18"))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"==")," (or ",(0,l.kt)("inlineCode",{parentName:"td"},"="),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is equal?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 == 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!=")," (or ",(0,l.kt)("inlineCode",{parentName:"td"},"<>"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is not equal?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 != 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is greater than?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 > 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is lower than?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 < 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">=")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is greater than or equal?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 >= 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<=")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is lower than or equal?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3 <= 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"&&")),(0,l.kt)("td",{parentName:"tr",align:null},"the last value or the falsy one"),(0,l.kt)("td",{parentName:"tr",align:null},"Are both truthy?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true && false")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"5 && 0 && 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"0"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"5 && 3 && 2")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"|","|")),(0,l.kt)("td",{parentName:"tr",align:null},"first truthy value or the last value"),(0,l.kt)("td",{parentName:"tr",align:null},"Is any truthy?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"true ","|","|"," false")," is ",(0,l.kt)("code",null,"true"),(0,l.kt)("br",null),(0,l.kt)("code",null,"5 ","|","|"," 3 ","|","|"," 0")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"5"),(0,l.kt)("br",null),(0,l.kt)("code",null,"0 ","|","|"," 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"5"),(0,l.kt)("br",null),(0,l.kt)("code",null,'"" ',"|","|",' "foo"')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"foo"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Is the value falsy?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!0")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?")," and ",(0,l.kt)("inlineCode",{parentName:"td"},":")),(0,l.kt)("td",{parentName:"tr",align:null},"any of the values inside"),(0,l.kt)("td",{parentName:"tr",align:null},"Ternary operator - if/else"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true ? 5 : 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"5"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"+")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Add numbers together or concatenate text"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1 + 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"4"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'"foo" + "bar"')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"foobar"'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'"foo" + 5')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"foo5"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Subtract one number from another"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"5 - 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"%")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Divides numbers and returns the remainder"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"5 % 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Divides two numbers"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"6 / 3")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"10 / 4")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2.5"),(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"td"},"Edge case:")," ",(0,l.kt)("inlineCode",{parentName:"td"},"10 / 0")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"0")," (for simplicity)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"*")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Multiplies one number by the other"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"4 * 2")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"**")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Exponentiation - power one number to the other"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"2 ** 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(")," and ",(0,l.kt)("inlineCode",{parentName:"td"},")")),(0,l.kt)("td",{parentName:"tr",align:null},"the inner type"),(0,l.kt)("td",{parentName:"tr",align:null},"Compute the expression altogether"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(2 + 3) * 5")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"20"))))),(0,l.kt)("h4",{id:"access"},"Access"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".")),(0,l.kt)("td",{parentName:"tr",align:null},"Access inner value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'{"id": 10}.id')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"10"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'["a", "b"].1')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"b"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".*.")),(0,l.kt)("td",{parentName:"tr",align:null},"Wildcard mapping"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'[{"id": 5}, {"id": 3}].*.id')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[5, 3]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"...")),(0,l.kt)("td",{parentName:"tr",align:null},"Spread arguments operator"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'shellquote(["foo", "bar baz"]...)')," is equivalent of ",(0,l.kt)("inlineCode",{parentName:"td"},'shellquote("foo", "bar baz")'))))),(0,l.kt)("h2",{id:"built-in-variables"},"Built-in Variables"),(0,l.kt)("h3",{id:"general-variables"},"General Variables"),(0,l.kt)("p",null,"There are some built-in variables available. Part of them may be resolved before execution (and therefore used for Pod settings),\nwhile the others may be accessible only dynamically in the container."),(0,l.kt)("h4",{id:"selected-variables"},"Selected variables"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Resolved immediately"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"always")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Alias for ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"never")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Alias for ",(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"config")," variables (like ",(0,l.kt)("inlineCode",{parentName:"td"},"config.abc"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Values provided for the configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"execution.id")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"TestWorkflow Execution's ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"execution.name")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"TestWorkflow Execution's name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"execution.number")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"TestWorkflow Execution's sequence number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"execution.scheduledAt")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"TestWorkflow Execution's scheduled at date")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"resource.id")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Either execution ID, or unique ID for parallel steps and services")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"resource.root")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Either execution ID, or nested resource ID, of the resource that has scheduled it")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"namespace")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Namespace where the execution will be scheduled")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"workflow.name")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the executed TestWorkflow")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"env")," variables (like ",(0,l.kt)("inlineCode",{parentName:"td"},"env.SOME_VARIABLE"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Environment variable value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"failed")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Is the TestWorkflow Execution failed already at this point?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"passed")),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Is the TestWorkflow Execution still not failed at this point?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"services")," (like ",(0,l.kt)("inlineCode",{parentName:"td"},"services.db.0.ip")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"services.db.*.ip"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the IPs of initialized services")))),(0,l.kt)("h3",{id:"contextual-variables"},"Contextual Variables"),(0,l.kt)("p",null,"In some contexts, there are additional variables available."),(0,l.kt)("h4",{id:"retry-conditions"},"Retry Conditions"),(0,l.kt)("p",null,"When using custom ",(0,l.kt)("inlineCode",{parentName:"p"},"retry")," condition, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"self.passed")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"self.failed")," for determining the status based on the step status."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  steps:\n  - shell: exit 0\n    # ensure that the step won't fail for 5 executions\n    retry:\n      count: 5\n      until: 'self.failed' \n")),(0,l.kt)("h4",{id:"matrix-and-shard"},"Matrix and Shard"),(0,l.kt)("p",null,"When using ",(0,l.kt)("inlineCode",{parentName:"p"},"services")," (service pods), ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel")," (parallel workers), or ",(0,l.kt)("inlineCode",{parentName:"p"},"execute")," (test suite) steps:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You can use ",(0,l.kt)("inlineCode",{parentName:"li"},"matrix.<name>")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"shard.<name>")," to access parameters for each copy."),(0,l.kt)("li",{parentName:"ul"},"You can access ",(0,l.kt)("inlineCode",{parentName:"li"},"index")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"count")," that will differ for each copy."),(0,l.kt)("li",{parentName:"ul"},"Also, you may use ",(0,l.kt)("inlineCode",{parentName:"li"},"matrixIndex"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"matrixCount"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"shardIndex")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"shardCount")," to get specific indexes/numbers for combinations and shards. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'spec:\n  services:\n    # Start two workers and label them with index information\n    db:\n      count: 2\n      description: "Instance {{ index + 1 }} of {{ count }}" # "Instance 1 of 2" and "Instance 2 of 2"\n      image: mongo:latest\n    # Run 2 servers with different node versions\n    api:\n      matrix:\n        node: [20, 21]\n      description: "Node v{{ matrix.node }}" # "Node v20" and "Node v21"\n      image: "node:{{ matrix.node }}"\n')),(0,l.kt)("h2",{id:"built-in-functions"},"Built-in Functions"),(0,l.kt)("h3",{id:"casting"},"Casting"),(0,l.kt)("p",null,"There are some functions that help to cast values to a different type. Additionally, when using wrong types in different places, the engine tries to cast them automatically."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Cast value to a string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string(5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"5"'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"string([10, 15, 20])")," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"10,15,20"'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'string({ "foo": "bar" })')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"{\\"foo\\":\\"bar\\"}"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list")),(0,l.kt)("td",{parentName:"tr",align:null},"list of provided values"),(0,l.kt)("td",{parentName:"tr",align:null},"Build a list of values"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list(10, 20)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[ 10, 20 ]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"Maps to integer"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int(10.5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"10"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'int("300.50")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"300"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Maps value to boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'bool("")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'bool("1239")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float")),(0,l.kt)("td",{parentName:"tr",align:null},"Maps value to decimal"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'float("300.50")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"300.5"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"eval")),(0,l.kt)("td",{parentName:"tr",align:null},"anything"),(0,l.kt)("td",{parentName:"tr",align:null},"Evaluates the expression"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'eval("4 * 5")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"20"))))),(0,l.kt)("h3",{id:"general"},"General"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"join")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Join list elements"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'join(["a", "b"])')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"a,b"'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'join(["a", "b"], " - ")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"a - b"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"split")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list")),(0,l.kt)("td",{parentName:"tr",align:null},"Split string to list"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'split("a,b,c")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'["a", "b", "c"]'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'split("a - b - c", " - ")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'["a", "b", "c"]'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"trim")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Trim whitespaces from the string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'trim("   \\nabc  d  ")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"abc  d"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"len")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"Length of array, map or string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'len([ "a", "b" ])')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'len("foobar")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"6"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'len({ "foo": "bar" })')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"1"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"floor")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"Round value down"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"floor(10.5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ceil")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"Round value up"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ceil(10.5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"11"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"round")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"Round value to nearest integer"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"round(10.5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"11"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"at")),(0,l.kt)("td",{parentName:"tr",align:null},"anything"),(0,l.kt)("td",{parentName:"tr",align:null},"Get value of the element"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"at([10, 2], 1)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'at({"foo": "bar"}, "foo")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"bar"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tojson")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Serialize value to JSON"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'tojson({ "foo": "bar" })')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"{\\"foo\\":\\"bar\\"}"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"json")),(0,l.kt)("td",{parentName:"tr",align:null},"anything"),(0,l.kt)("td",{parentName:"tr",align:null},"Parse the JSON"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'json("{\\"foo\\":\\"bar\\"}")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'{ "foo": "bar" }'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"toyaml")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Serialize value to YAML"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'toyaml({ "foo": "bar" })')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"foo: bar\\n'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"yaml")),(0,l.kt)("td",{parentName:"tr",align:null},"anything"),(0,l.kt)("td",{parentName:"tr",align:null},"Parse the YAML"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'yaml("foo: bar")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'{ "foo": "bar" }'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shellquote")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Sanitize arguments for shell"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'shellquote("foo bar")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"\\"foo bar\\""'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'shellquote("foo", "bar baz")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"foo \\"bar baz\\""'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shellparse")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]string")),(0,l.kt)("td",{parentName:"tr",align:null},"Parse shell arguments"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'shellparse("foo bar")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'["foo", "bar"]'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'shellparse("foo \\"bar baz\\"")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'["foo", "bar baz"]'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"map")),(0,l.kt)("td",{parentName:"tr",align:null},"Map list or map values with expression; ",(0,l.kt)("inlineCode",{parentName:"td"},"_.value")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"_.index"),"/",(0,l.kt)("inlineCode",{parentName:"td"},"_.key")," are available"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'map([1,2,3,4,5], "_.value * 2")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[2,4,6,8,10]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"filter")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list")),(0,l.kt)("td",{parentName:"tr",align:null},"Filter list values with expression; ",(0,l.kt)("inlineCode",{parentName:"td"},"_.value")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"_.index")," are available"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'filter([1,2,3,4,5], "_.value > 2")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[3,4,5]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"jq")),(0,l.kt)("td",{parentName:"tr",align:null},"anything"),(0,l.kt)("td",{parentName:"tr",align:null},"Execute ",(0,l.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Jq_(programming_language)"},(0,l.kt)("strong",{parentName:"a"},"jq"))," against value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"jq(","[1,2,3,4,5]",', ". ',"|",' max")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[5]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"range")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]int")),(0,l.kt)("td",{parentName:"tr",align:null},"Build range of numbers"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"range(5, 10)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[5, 6, 7, 8, 9]"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"range(5)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[0, 1, 2, 3, 4]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"relpath")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Build relative path"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'relpath("/a/b/c")')," may be ",(0,l.kt)("inlineCode",{parentName:"td"},"./b/c"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'relpath("/a/b/c", "/a/b")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},'"./c"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"abspath")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Build absolute path"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'abspath("/a/b/c")')," is ",(0,l.kt)("inlineCode",{parentName:"td"},"/a/b/c"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'abspath("b/c")')," may be ",(0,l.kt)("inlineCode",{parentName:"td"},"/some/working/dir/b/c"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chunk")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]list")),(0,l.kt)("td",{parentName:"tr",align:null},"Split list to chunks of specified maximum size"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chunk([1,2,3,4,5], 2)")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"[[1,2], [3,4], [5]]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Return current date (either ",(0,l.kt)("inlineCode",{parentName:"td"},"2006-01-02T15:04:05.000Z07:00")," format or custom argument (",(0,l.kt)("a",{parentName:"td",href:"https://go.dev/src/time/format.go#L101"},(0,l.kt)("strong",{parentName:"a"},"Go syntax")),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"date()")," may be ",(0,l.kt)("inlineCode",{parentName:"td"},'"2024-06-04T11:59:32.308Z"'),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},'date("2006-01-02")')," may be ",(0,l.kt)("inlineCode",{parentName:"td"},"2024-06-04"))))),(0,l.kt)("h3",{id:"file-system"},"File System"),(0,l.kt)("p",null,"These functions are only executed during the execution."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"file")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"File contents"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'file("/etc/some/path")')," may be ",(0,l.kt)("inlineCode",{parentName:"td"},'"some\\ncontent"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"glob")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]string")),(0,l.kt)("td",{parentName:"tr",align:null},"Find files by pattern"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'glob("/etc/**/*", "./x/**/*.js")')," may be ",(0,l.kt)("inlineCode",{parentName:"td"},'["/etc/some/file", "/etc/other/file", "/some/working/dir/x/file.js"]'))))),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Built-in Functions",src:n(65253).Z,width:"722",height:"570"})))}k.isMDXComponent=!0},65253:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/built-in-functions-d786c32890643f552b30838c72563119.png"},22280:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/expressions-2d42f579fea2772a078ccd5381ed9e1c.png"}}]);