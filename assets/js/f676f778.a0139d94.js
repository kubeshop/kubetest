"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[5747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=d;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const s={},l="Gitops Testing with ArgoCD",r={unversionedId:"articles/argocd-integration",id:"articles/argocd-integration",title:"Gitops Testing with ArgoCD",description:"The following is a step-by-step walkthrough to test the automated application deployment and execution of Postman collections in a local Minikube cluster.",source:"@site/docs/articles/argocd-integration.md",sourceDirName:"articles",slug:"/articles/argocd-integration",permalink:"/articles/argocd-integration",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/argocd-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GitOps Testing with Flux",permalink:"/articles/flux-integration"},next:{title:"Creating Your First Test",permalink:"/articles/creating-first-test"}},i={},c=[{value:"Tutorial",id:"tutorial",level:2},{value:"1. Make sure you have Testkube installed in your cluster.",id:"1-make-sure-you-have-testkube-installed-in-your-cluster",level:3},{value:"2. Install ArgoCD.",id:"2-install-argocd",level:3},{value:"3. Install a \u201cHello Kubernetes!\u201d application in your cluster.",id:"3-install-a-hello-kubernetes-application-in-your-cluster",level:3},{value:"4. Set up a Git Repository containing some Postman collections.",id:"4-set-up-a-git-repository-containing-some-postman-collections",level:3},{value:"5. Configure ArgoCD to use the Testkube plugin.",id:"5-configure-argocd-to-use-the-testkube-plugin",level:3},{value:"6. Patch ArgoCD&#39;s deployment",id:"6-patch-argocds-deployment",level:3},{value:"7. Configure an ArgoCD application to manage test collections in your cluster.",id:"7-configure-an-argocd-application-to-manage-test-collections-in-your-cluster",level:3},{value:"8. Run the initial ArgoCD sync and check your cluster.",id:"8-run-the-initial-argocd-sync-and-check-your-cluster",level:3},{value:"9. Run ad-hoc tests from the CLI.",id:"9-run-ad-hoc-tests-from-the-cli",level:3},{value:"10. See test results in the Testkube dashboard.",id:"10-see-test-results-in-the-testkube-dashboard",level:3},{value:"11. Allow to add ownerReferences to CronJobs metadata for Tests and Test Suites",id:"11-allow-to-add-ownerreferences-to-cronjobs-metadata-for-tests-and-test-suites",level:3},{value:"GitOps Takeaways",id:"gitops-takeaways",level:2}],p={toc:c};function u(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gitops-testing-with-argocd"},"Gitops Testing with ArgoCD"),(0,o.kt)("p",null,"The following is a step-by-step walkthrough to test the automated application deployment and execution of Postman collections in a local Minikube cluster."),(0,o.kt)("p",null,"Let\u2019s start with setting things up for our GitOps-powered testing machine!"),(0,o.kt)("h2",{id:"tutorial"},"Tutorial"),(0,o.kt)("h3",{id:"1-make-sure-you-have-testkube-installed-in-your-cluster"},"1. Make sure you have Testkube installed in your cluster."),(0,o.kt)("p",null,"If you haven't installed Testkube in your cluster yet, visit the ",(0,o.kt)("a",{parentName:"p",href:"./getting-started"},"Getting Started guide")," for a walkthrough on installing Testkube.\n\u200d"),(0,o.kt)("h3",{id:"2-install-argocd"},"2. Install ArgoCD."),(0,o.kt)("p",null,"Follow the ",(0,o.kt)("a",{parentName:"p",href:"https://argo-cd.readthedocs.io/en/stable/getting_started/"},"ArgoCD Installation Guide"),"."),(0,o.kt)("p",null,"Note: For step 3 in the guide, \u201cAccess The Argo CD API Server\u201d, choose the \u201cPort Forwarding\u201d method, as that is the easiest way to connect to it with a Minikube cluster."),(0,o.kt)("h3",{id:"3-install-a-hello-kubernetes-application-in-your-cluster"},"3. Install a \u201cHello Kubernetes!\u201d application in your cluster."),(0,o.kt)("p",null,"We will create a YAML file for a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello Kubernetes")," application that we will create our integration tests against."),(0,o.kt)("p",null,"Create the following ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployment")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="hello-kubernetes.yaml"',title:'"hello-kubernetes.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: hello-kubernetes-service\nspec:\n  ports:\n    - name: http\n      port: 80\n      targetPort: 8080\n  selector:\n    app: hello-kubernetes\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-kubernetes-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-kubernetes\n  template:\n    metadata:\n      labels:\n        app: hello-kubernetes\n    spec:\n      containers:\n        - name: hello-kubernetes\n          image: gcr.io/google-samples/kubernetes-bootcamp:v1\n          ports:\n            - containerPort: 8080\n")),(0,o.kt)("p",null,"And deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello Kubernetes")," deployment with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f hello-kubernetes.yaml\n")),(0,o.kt)("p",null,"You can test that your application has been correctly installed by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl get svc -n default hello-kubernetes-service\n")),(0,o.kt)("h3",{id:"4-set-up-a-git-repository-containing-some-postman-collections"},"4. Set up a Git Repository containing some Postman collections."),(0,o.kt)("p",null,"We are going to use tests created by Postman and exported in a ",(0,o.kt)("a",{parentName:"p",href:"https://www.postman.com/collection/"},"Postman collections file"),"."),(0,o.kt)("p",null,"We can upload this to the same Git Repository as our application, but in practice the repository could be the same repository hosting the application or it could also be in a separate repository where you manage all your test artifacts."),(0,o.kt)("p",null,"So let\u2019s create our ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-kubernetes.json")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"postman-collections")," folder and push it to the repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="hello-kubernetes.json"',title:'"hello-kubernetes.json"'},'{\n  "info": {\n    "_postman_id": "02c90123-318f-4680-8bc2-640adabb45e8",\n    "name": "New Collection",\n    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"\n  },\n  "item": [\n    {\n      "name": "hello-world test",\n      "event": [\n        {\n          "listen": "test",\n          "script": {\n            "exec": [\n              "pm.test(\\"Body matches string\\", () => {",\n              "    pm.expect(pm.response.text()).to.contain(\\"Hello Kubernetes\\")",\n              "})",\n              "",\n              "pm.test(\\"Body matches string\\", () => {",\n              "    pm.expect(pm.response.status).to.equal(\\"OK\\")",\n              "})"\n            ],\n            "type": "text/javascript"\n          }\n        }\n      ],\n      "request": {\n        "method": "GET",\n        "header": [],\n        "url": {\n          "raw": "http://hello-kubernetes-service.default",\n          "protocol": "http",\n          "host": ["hello-kubernetes-service", "default"]\n        }\n      },\n      "response": []\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"You can see an example of how the repository should look ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube-argocd"},"here"),"."),(0,o.kt)("h3",{id:"5-configure-argocd-to-use-the-testkube-plugin"},"5. Configure ArgoCD to use the Testkube plugin."),(0,o.kt)("p",null,"To get ArgoCD to use Testkube, we need to write a Config Management ",(0,o.kt)("a",{parentName:"p",href:"https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#configmap-plugin"},"plugin"),".\nTo do so, please nest the plugin config file in a ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigMap")," manifest under the ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin.yaml")," key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argocd-plugins.yaml',title:'"argocd-plugins.yaml'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm-plugin\n  namespace: argocd\ndata:\n  plugin.yaml: |\n    apiVersion: argoproj.io/v1alpha1\n    kind: ConfigManagementPlugin\n    metadata:\n      name: testkube\n    spec:\n      version: v1.0\n      generate:\n        command: [bash, -c]\n        args:\n          - |\n            testkube generate tests-crds .\n")),(0,o.kt)("p",null,"And apply it with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f argocd-plugins.yaml\n")),(0,o.kt)("p",null,"As you can see here, we\u2019re using the command ",(0,o.kt)("inlineCode",{parentName:"p"},"testkube generate tests-crds")," which creates the Custom Resources (manifests) that ArgoCD will then add to our cluster. "),(0,o.kt)("h3",{id:"6-patch-argocds-deployment"},"6. Patch ArgoCD's deployment"),(0,o.kt)("p",null,"To install a plugin, patch ",(0,o.kt)("inlineCode",{parentName:"p"},"argocd-repo-server")," deployment to run the plugin container as a sidecar."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="deployment.yaml"',title:'"deployment.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-repo-server\nspec:\n  template:\n    spec:\n      containers:\n      - name: testkube\n        command: [/var/run/argocd/argocd-cmp-server]\n        image: kubeshop/testkube-argocd:latest\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 999\n        volumeMounts:\n          - mountPath: /var/run/argocd\n            name: var-files\n          - mountPath: /home/argocd/cmp-server/plugins\n            name: plugins\n          - mountPath: /home/argocd/cmp-server/config/plugin.yaml\n            subPath: plugin.yaml\n            name: argocd-cm-plugin\n          - mountPath: /tmp\n            name: cmp-tmp\n      volumes:\n        - configMap:\n            name: argocd-cm-plugin\n          name: argocd-cm-plugin\n        - emptyDir: {}\n          name: cmp-tmp\n")),(0,o.kt)("p",null,"Apply the patch with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl patch deployments.apps -n argocd argocd-repo-server --patch-file deployment.yaml\n")),(0,o.kt)("h3",{id:"7-configure-an-argocd-application-to-manage-test-collections-in-your-cluster"},"7. Configure an ArgoCD application to manage test collections in your cluster."),(0,o.kt)("p",null,"Create the file that will contain the ArgoCD application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="testkube-application.yaml"',title:'"testkube-application.yaml"'},'apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n name: testkube-tests\n namespace: argocd\nspec:\n project: default\n source:\n   repoURL: https://github.com/USERNAME/testkube-argocd.git\n   targetRevision: HEAD\n   path: postman-collections\n   plugin:\n     name: "testkube-v1.0"\n destination:\n   server: https://kubernetes.default.svc\n   namespace: testkube\n')),(0,o.kt)("p",null,"Notice that we have defined path ",(0,o.kt)("inlineCode",{parentName:"p"},"postman-collections")," which is the test folder with our Postman collections from the steps earlier. With Testkube you can use multiple test executors like ",(0,o.kt)("inlineCode",{parentName:"p"},"curl"),", for example, so it is convenient to have a folder for each. We have also defined the ",(0,o.kt)("inlineCode",{parentName:"p"},".destination.namespace")," to be ",(0,o.kt)("inlineCode",{parentName:"p"},"testkube"),", which is where the tests should be deployed in our cluster.\n\u200d"),(0,o.kt)("p",null,"Now let\u2019s create the application with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f testkube-application.yaml\n")),(0,o.kt)("h3",{id:"8-run-the-initial-argocd-sync-and-check-your-cluster"},"8. Run the initial ArgoCD sync and check your cluster."),(0,o.kt)("p",null,"On ArgoCD\u2019s dashboard, we will now see the newly created application. Let\u2019s click to get into it and sync our tests."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ArgoCD Testkube Tests",src:n(56074).Z,width:"2004",height:"948"})),(0,o.kt)("p",null,"And now click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Sync")," to see your tests created."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Sync Testing",src:n(40895).Z,width:"2592",height:"952"})),(0,o.kt)("p",null,"Voil\xe0! Our test collection is created and managed by ArgoCD with every new test created and updated in the GitHub repository containing the tests!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Test Management with ArgoCD",src:n(39553).Z,width:"1852",height:"1076"})),(0,o.kt)("h3",{id:"9-run-ad-hoc-tests-from-the-cli"},"9. Run ad-hoc tests from the CLI."),(0,o.kt)("p",null,"List the tests in your cluster with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"testkube get tests\n")),(0,o.kt)("p",null,"You should see your deployed test artifacts:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Deployed Artifacts",src:n(43719).Z,width:"2488",height:"364"})),(0,o.kt)("p",null,"To run those tests execute the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"testkube run test hello-kubernetes\n")),(0,o.kt)("p",null,"\u200d\nThe test execution will start in the background. Copy the command from the image below to check the result of the execution of the test:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Cluster ID in CLI",src:n(44771).Z,width:"1334",height:"814"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ testkube get execution EXECUTION_ID\n")),(0,o.kt)("p",null,"\u200dYou should see that the tests have run successfully, as in the image below."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Viewing Executed Tests",src:n(31399).Z,width:"1554",height:"662"})),(0,o.kt)("h3",{id:"10-see-test-results-in-the-testkube-dashboard"},"10. See test results in the Testkube dashboard."),(0,o.kt)("p",null,"You can also see the results of your tests in a nice dashboard. Open the Testkube dashboard with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"testkube dashboard\n")),(0,o.kt)("p",null,"And you will be able to see the results of the execution in the Executions tab as seen in the image below:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Test Execution Dashboard",src:n(13047).Z,width:"2858",height:"1396"})),(0,o.kt)("p",null,"We now have an automated test deployment and execution pipeline based on GitOps principles!"),(0,o.kt)("h3",{id:"11-allow-to-add-ownerreferences-to-cronjobs-metadata-for-tests-and-test-suites"},"11. Allow to add ownerReferences to CronJobs metadata for Tests and Test Suites"),(0,o.kt)("p",null,"You will need to enable helm chart variable ",(0,o.kt)("inlineCode",{parentName:"p"},"useArgoCDSync = true")," in order to make CronJobs created for Tests and Test Suites syncronized in ArgoCD."),(0,o.kt)("h2",{id:"gitops-takeaways"},"GitOps Takeaways"),(0,o.kt)("p",null,"Once fully realized - using GitOps for testing of Kubernetes applications as described above provides a powerful alternative to a more traditional approach where orchestration is tied to your current CI/CD tooling and not closely aligned with the lifecycle of Kubernetes applications."),(0,o.kt)("p",null,"We would love to get your thoughts on the above approach - over-engineering done right? Waste of time? Let us know on ",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/channels/884464549347074049/885185660808474664"},"our Discord server"),"!"))}u.isMDXComponent=!0},56074:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/argocd-dashbord-645786b7cf8c54e138f3cc62bef5f31c.png"},40895:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/argocd-sync-9f70b2c04ae1ec2d4bd6ed51bd913ae1.png"},39553:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/argocd-synced-tests-4fb1a8d2c28c17e4260e9112516b77be.png"},44771:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cli-get-tests-executions-032a6a3ffeb9c799b09372386c0c4c10.png"},31399:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cli-tests-results-c5596251fb5331da3eff559e4412ac41.png"},43719:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/list-tests-cli-08a1b9e5fe8772c105aa34d32ee8e14b.png"},13047:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/test-executions-ui-7cae3ec9cb81250a679c7bc82ca80d74.png"}}]);