"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[7952],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),c=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,b=p["".concat(a,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(b,l(l({ref:t},s),{},{components:n})):o.createElement(b,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var u={};for(var a in t)hasOwnProperty.call(t,a)&&(u[a]=t[a]);u.originalType=e,u.mdxType="string"==typeof e?e:r,l[1]=u;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},89448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={},l=void 0,u={unversionedId:"cli/testkube_cloud_init",id:"cli/testkube_cloud_init",title:"testkube_cloud_init",description:"testkube cloud init",source:"@site/docs/cli/testkube_cloud_init.md",sourceDirName:"cli",slug:"/cli/testkube_cloud_init",permalink:"/cli/testkube_cloud_init",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/cli/testkube_cloud_init.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"testkube_cloud_disconnect",permalink:"/cli/testkube_cloud_disconnect"},next:{title:"testkube_cloud_login",permalink:"/cli/testkube_cloud_login"}},a={},c=[{value:"testkube cloud init",id:"testkube-cloud-init",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"testkube-cloud-init"},"testkube cloud init"),(0,r.kt)("p",null,"[Deprecated]"," Install Testkube Cloud Agent and connect to Testkube Cloud environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"testkube cloud init [flags]\n")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --agent-token string         Testkube Cloud agent key\n      --chart string               chart name (usually you don\'t need to change it) (default "kubeshop/testkube")\n      --cloud-root-domain string   defaults to testkube.io, usually don\'t need to be changed [required for cloud mode] (default "testkube.io")\n      --dry-run                    dry run mode - only print commands that would be executed\n      --env-id string              Testkube Cloud environment id\n  -h, --help                       help for init\n      --multi-namespace            multi namespace mode\n      --name string                installation name (usually you don\'t need to change it) (default "testkube")\n      --namespace string           namespace where to install (default "testkube")\n      --no-confirm                 don\'t ask for confirmation - unatended installation mode\n      --no-operator                should operator be installed (for more instances in multi namespace mode it should be set to true)\n      --org-id string              Testkube Cloud organization id\n      --values string              path to Helm values file\n')),(0,r.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  -a, --api-uri string   api uri, default value read from config if set (default "https://demo.testkube.io/results")\n  -c, --client string    client used for connecting to Testkube API one of proxy|direct (default "proxy")\n      --insecure         insecure connection for direct client\n      --oauth-enabled    enable oauth\n      --verbose          show additional debug messages\n')),(0,r.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/cli/testkube_cloud"},"testkube cloud"),"\t - ","[Deprecated]"," Testkube Cloud commands")))}d.isMDXComponent=!0}}]);