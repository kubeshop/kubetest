"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[3520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),r=n(67294),i=n(86010),o=n(12466),s=n(76775),l=n(91980),p=n(67392),u=n(50012);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,p]=k({queryString:n,groupId:a}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),f=(()=>{const e=l??c;return d({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),h(e)}),[p,h,i]),tabValues:i}}var f=n(72389);const v="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==s&&(c(t),l(a))},d=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},o,{className:(0,i.Z)("tabs__item",g,null==o?void 0:o.className,{"tabs__item--active":s===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",v)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(w,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},79493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(74866),o=n(85162);const s={},l="Test Workflows - Services",p={unversionedId:"articles/test-workflows-services",id:"articles/test-workflows-services",title:"Test Workflows - Services",description:"Often if your use-case is more complex, you may need additional services for the Tests you are running. Common use cases are:",source:"@site/docs/articles/test-workflows-services.md",sourceDirName:"articles",slug:"/articles/test-workflows-services",permalink:"/articles/test-workflows-services",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/test-workflows-services.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Workflows - Parallel Steps",permalink:"/articles/test-workflows-parallel"},next:{title:"Test Workflows - Matrix and Sharding",permalink:"/articles/test-workflows-matrix-and-sharding"}},u={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Connecting to the services",id:"connecting-to-the-services",level:3},{value:"Basic configuration",id:"basic-configuration",level:3},{value:"Fetching logs",id:"fetching-logs",level:3},{value:"Pod configuration",id:"pod-configuration",level:3},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Matrix and sharding",id:"matrix-and-sharding",level:3},{value:"Providing content",id:"providing-content",level:2},{value:"Copying content inside",id:"copying-content-inside",level:3},{value:"Example",id:"example",level:4},{value:"Static content or a Git repository",id:"static-content-or-a-git-repository",level:3},{value:"Examples",id:"examples",level:2},{value:"JMeter with distributed Remote Workers",id:"jmeter-with-distributed-remote-workers",level:3},{value:"Selenium tests with multiple remote browsers",id:"selenium-tests-with-multiple-remote-browsers",level:3},{value:"Run database for integration tests",id:"run-database-for-integration-tests",level:3}],m={toc:c};function d(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"test-workflows---services"},"Test Workflows - Services"),(0,r.kt)("p",null,"Often if your use-case is more complex, you may need additional services for the Tests you are running. Common use cases are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Database, i.e. ",(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/mongo"},(0,r.kt)("strong",{parentName:"a"},"MongoDB"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/postgresql"},(0,r.kt)("strong",{parentName:"a"},"PostgreSQL"))),(0,r.kt)("li",{parentName:"ul"},"Workers, i.e. ",(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/justb4/jmeter"},(0,r.kt)("strong",{parentName:"a"},"remote JMeter workers"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/selenium/standalone-firefox"},(0,r.kt)("strong",{parentName:"a"},"Selenium Grid's remote browsers"))),(0,r.kt)("li",{parentName:"ul"},"Service under test, i.e. your API to run E2E tests against it")),(0,r.kt)("p",null,"Testkube allows you to run such services for the Test Workflow, communicate with them and debug smoothly."),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"When you define the service, the Test Workflow is creating a new pod and any other require resources for each of instances,\nread its status and logs, and provides its information (like IP) for use in further steps. After the service is no longer needed, it's cleaned up."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As the services are started in a separate pod, they don't share the file system with the Test Workflow execution.\nThere are multiple ways to share data with them - either using ",(0,r.kt)("a",{parentName:"p",href:"#providing-content"},(0,r.kt)("strong",{parentName:"a"},"one of techniques described below")),", or advanced Kubernetes' native ways like ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes"},(0,r.kt)("strong",{parentName:"a"},"ReadWriteMany volumes")),". ")),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"To add some services, you need to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," clause.\nIt can be either directly on the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec")," level (to be available for the whole execution), or on specific step (to isolate it)."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You may want to use services in ",(0,r.kt)("a",{parentName:"p",href:"/articles/test-workflows-examples-templates"},"Test Workflow Template"),", to reuse them for multiple tests.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: example-workflow-with-mongo-service\nspec:\n  services:\n    db:\n      timeout: 5m\n      image: mongo:latest\n      env:\n      - name: MONGO_INITDB_ROOT_USERNAME\n        value: root\n      - name: MONGO_INITDB_ROOT_PASSWORD\n        value: p4ssw0rd\n      readinessProbe:\n        tcpSocket:\n          port: 27017\n        periodSeconds: 1\n  steps:\n  - name: Check if it is running\n    run:\n      image: mongo:latest\n      shell: |\n        echo Connecting to MongoDB at {{ services.db.0.ip }}\n        mongosh -u root -p p4ssw0rd {{ services.db.0.ip }} --eval 'db.serverStatus().localTime'\n"))),(0,r.kt)(o.Z,{value:"log",label:"Log Output",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"example-workflow-with-mongo-service workflow",src:n(91770).Z,width:"2162",height:"2398"})))),(0,r.kt)("h3",{id:"connecting-to-the-services"},"Connecting to the services"),(0,r.kt)("p",null,"To connect to create services, you can simply use ",(0,r.kt)("inlineCode",{parentName:"p"},"services.<SVC_NAME>.<INDEX>.ip")," expression in the place you need its address (i.e. environment variable, or shell command)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"services.db.0.ip")," will return ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," - IP of the 1st instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"db")," service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"services.db.*.ip")," will return ",(0,r.kt)("inlineCode",{parentName:"li"},"[]string")," - list of IPs of all the ",(0,r.kt)("inlineCode",{parentName:"li"},"db")," service instances")),(0,r.kt)("h3",{id:"basic-configuration"},"Basic configuration"),(0,r.kt)("p",null,"The service allows similar fields as the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," command, i.e.:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"env"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"volumeMounts"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"resources")," - to configure the container"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"args")," - to specify command to run"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shell")," - to specify script to run (instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"command"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"args"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description")," that may provide human-readable information for each instance separately")),(0,r.kt)("h3",{id:"fetching-logs"},"Fetching logs"),(0,r.kt)("p",null,"By default we are not saving the logs for the services. If you would like to fetch the logs, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"logs")," property.\nIt takes an expression condition, so you can dynamically choose whether it should be saved or not. Often you will use:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logs: always")," to always store the logs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logs: failed")," to store the logs only if the Test Workflow has failed")),(0,r.kt)("h3",{id:"pod-configuration"},"Pod configuration"),(0,r.kt)("p",null,"The service is started as a separate job/pod, so you can configure ",(0,r.kt)("inlineCode",{parentName:"p"},"pod")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," similarly to general Test Workflow."),(0,r.kt)("h3",{id:"lifecycle"},"Lifecycle"),(0,r.kt)("p",null,"You can apply ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe"},(0,r.kt)("strong",{parentName:"a"},"readinessProbe"))," to ensure that the service will be available for the next step."),(0,r.kt)("p",null,"The Test Workflow won't continue until the container will be ready then. To ensure that the execution won't get stuck, you can add ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout")," property (like ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout: 1h30m20s"),"),\nso it will fail if the service is not ready after that time."),(0,r.kt)("h3",{id:"matrix-and-sharding"},"Matrix and sharding"),(0,r.kt)("p",null,"The services are meant to support matrix and sharding, to run multiple replicas and/or distribute the load across multiple instances.\nIt is supported by regular matrix/sharding properties (",(0,r.kt)("inlineCode",{parentName:"p"},"matrix"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"shards"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"maxCount"),")."),(0,r.kt)("p",null,"You can read more about it in the general ",(0,r.kt)("a",{parentName:"p",href:"/articles/test-workflows-matrix-and-sharding"},(0,r.kt)("strong",{parentName:"a"},"Matrix and Sharding"))," documentation."),(0,r.kt)("h2",{id:"providing-content"},"Providing content"),(0,r.kt)("p",null,"There are multiple ways to provide the files inside the services."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As the services are started in a separate pod, they don't share the file system with the Test Workflow execution.")),(0,r.kt)("h3",{id:"copying-content-inside"},"Copying content inside"),(0,r.kt)("p",null,"It is possible to copy the files from the original Test Workflow into the services.\nAs an example, you may want to fetch the repository and install the dependencies on the original TestWorkflow,\nand then distribute it to the services."),(0,r.kt)("p",null,"To do so, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," property. It takes list of files to transfer:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'{ from: "/data/repo/build" }')," will copy the ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/repo/build")," directory from execution's Pod into ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/repo/build")," in the service's Pod"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'{ from: "/data/repo/build", to: "/out" }')," will copy the ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/repo/build")," directory from execution's Pod into ",(0,r.kt)("inlineCode",{parentName:"li"},"/out")," in the service's Pod"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'{ from: "/data/repo/build", to: "/out", "files": ["**/*.json"] }')," will copy only JSON files from the ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/repo/build")," directory from execution's Pod into ",(0,r.kt)("inlineCode",{parentName:"li"},"/out")," in the service's Pod")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: example-workflow-with-building-app-and-files-transfer\nspec:\n  content:\n    git:\n      uri: https://github.com/kubeshop/testkube-docs.git\n      revision: main\n  container:\n    workingDir: /data/repo\n    resources:\n      requests:\n        cpu: 1\n        memory: 2Gi\n\n  steps:\n  - name: Build the application\n    run:\n      image: node:21\n      shell: npm i && npm run build\n\n  - name: Test the application\n    services:\n      server:\n        timeout: 1m\n        transfer:\n        - from: /data/repo/build\n          to: /usr/share/nginx/html\n        image: nginx:1.25.4\n        logs: always\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          periodSeconds: 1\n    steps:\n    - shell: wget -q -O - {{ services.server.0.ip }}\n"))),(0,r.kt)(o.Z,{value:"log",label:"Log Output",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"example-workflow-with-building-app-and-files-transfer.png",src:n(41384).Z,width:"1920",height:"2006"})))),(0,r.kt)("h3",{id:"static-content-or-a-git-repository"},"Static content or a Git repository"),(0,r.kt)("p",null,"Services allow to provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," property similar to the one directly in the Test Workflow. As an example, you may provide static configuration files to the service:"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: example-workflow-with-nginx\nspec:\n  services:\n    http:\n      timeout: 5m\n      content:\n        files:\n        - path: /etc/nginx/nginx.conf\n          content: |\n            events { worker_connections 1024; }\n            http {\n              server {\n                listen 8888;\n                location / { root /www; }\n              }\n            }\n        - path: /www/index.html\n          content: "foo-bar"\n      image: nginx:1.25.4\n      readinessProbe:\n        httpGet:\n          path: /\n          port: 8888\n        periodSeconds: 1\n  steps:\n  - shell: wget -q -O - {{ services.http.0.ip }}:8888\n'))),(0,r.kt)(o.Z,{value:"ui",label:"Log Output",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"example-workflow-with-nginx.png",src:n(71668).Z,width:"2158",height:"1896"})))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"jmeter-with-distributed-remote-workers"},"JMeter with distributed Remote Workers"),(0,r.kt)("p",null,"You can easily run JMeter with distributed remote workers, that could be even spread evenly across all the Kubernetes nodes."),(0,r.kt)("p",null,"The example below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read JMX configuration from Git repository (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.content.git"),")"),(0,r.kt)("li",{parentName:"ul"},"Start 5 remote workers (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.services.slave.count"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Distribute them evenly across nodes (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.services.slave.use[0]")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"distribute/evenly")," template is setting common ",(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/"},(0,r.kt)("inlineCode",{parentName:"a"},"pod.topologySpreadConstraints")),")"),(0,r.kt)("li",{parentName:"ul"},"Reserve 1/8 CPU and 128MB memory for each instance (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.services.slave.container.resources"),")"),(0,r.kt)("li",{parentName:"ul"},"Wait until they will accept connection at port 1099 (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.services.slave.readinessProbe"),")"))),(0,r.kt)("li",{parentName:"ul"},"Run JMeter controller against all the remote workers (",(0,r.kt)("inlineCode",{parentName:"li"},"spec.services.steps[0].run"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It uses ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ services.slave.*.ip }}")," as an argument - ",(0,r.kt)("inlineCode",{parentName:"li"},"services.slave.*.ip")," will return list of IPs, and they will be joined by comma (",(0,r.kt)("inlineCode",{parentName:"li"},","),") to convert to text")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: distributed-jmeter-example\nspec:\n  content:\n    git:\n      uri: https://github.com/kubeshop/testkube\n      revision: main\n      paths:\n      - test/jmeter/executor-tests/jmeter-executor-smoke.jmx\n  container:\n    workingDir: /data/repo/test/jmeter/executor-tests\n  services:\n    slave:\n      use:\n      - name: distribute/evenly\n      count: 5\n      timeout: 30s\n      image: justb4/jmeter:5.5\n      command:\n      - jmeter-server\n      - -Dserver.rmi.localport=60000\n      - -Dserver_port=1099\n      - -Jserver.rmi.ssl.disable=true\n      container:\n        resources:\n          requests:\n            cpu: 128m\n            memory: 128Mi\n      readinessProbe:\n        tcpSocket:\n          port: 1099\n        periodSeconds: 1\n  steps:\n  - name: Run tests\n    run:\n      image: justb4/jmeter:5.5\n      shell: |\n        jmeter -n \\\n          -X -Jserver.rmi.ssl.disable=true -Jclient.rmi.localport=7000 \\\n          -R {{ services.slave.*.ip }} \\\n          -t jmeter-executor-smoke.jmx\n")),(0,r.kt)("h3",{id:"selenium-tests-with-multiple-remote-browsers"},"Selenium tests with multiple remote browsers"),(0,r.kt)("p",null,"You can initialize multiple remote browsers, and then ",(0,r.kt)("a",{parentName:"p",href:"/articles/test-workflows-parallel"},(0,r.kt)("strong",{parentName:"a"},"run tests against them in parallel")),"."),(0,r.kt)("p",null,"The example below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clone the test code (",(0,r.kt)("inlineCode",{parentName:"li"},"content"),")"),(0,r.kt)("li",{parentName:"ul"},"Start 3 instances of ",(0,r.kt)("inlineCode",{parentName:"li"},"remote")," service (",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Each instance have different browser used (",(0,r.kt)("inlineCode",{parentName:"li"},"image")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.matrix.browser")," passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.image"),")"),(0,r.kt)("li",{parentName:"ul"},"Each instance expose the driver name in their description (",(0,r.kt)("inlineCode",{parentName:"li"},"driver")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.matrix.browser")," passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.description"),")"),(0,r.kt)("li",{parentName:"ul"},"Wait until the browser is ready to connect (",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.readinessProbe"),")"),(0,r.kt)("li",{parentName:"ul"},"Always save the browser logs (",(0,r.kt)("inlineCode",{parentName:"li"},"services.remote.logs"),")"))),(0,r.kt)("li",{parentName:"ul"},"Run tests in parallel for each of the browser (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].parallel"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Run for each ",(0,r.kt)("inlineCode",{parentName:"li"},"remote")," service instance (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].parallel.matrix.browser"),")"),(0,r.kt)("li",{parentName:"ul"},"Transfer the code from the repository to the parallel step (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].parallel.transfer"),")"),(0,r.kt)("li",{parentName:"ul"},"Sets the environment variables based on the service instance's description and IP (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].parallel.container.env"),")"),(0,r.kt)("li",{parentName:"ul"},"Run tests (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].parallel.shell"),")")))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: TestWorkflow\napiVersion: testworkflows.testkube.io/v1\nmetadata:\n  name: selenium-remote-browsers-example\nspec:\n  content:\n    git:\n      uri: https://github.com/cerebro1/selenium-testkube.git\n      paths:\n      - selenium-java\n  services:\n    remote:\n      matrix:\n        browser:\n        - driver: chrome\n          image: selenium/standalone-chrome:4.21.0-20240517\n        - driver: edge\n          image: selenium/standalone-edge:4.21.0-20240517\n        - driver: firefox\n          image: selenium/standalone-firefox:4.21.0-20240517\n      logs: always\n      image: \"{{ matrix.browser.image }}\"\n      description: \"{{ matrix.browser.driver }}\"\n      readinessProbe:\n        httpGet:\n          path: /wd/hub/status\n          port: 4444\n        periodSeconds: 1\n  steps:\n  - name: Run cross-browser tests\n    parallel:\n      matrix:\n        browser: 'services.remote'\n      transfer:\n      - from: /data/repo/selenium-java\n      container:\n        workingDir: /data/repo/selenium-java\n        image: maven:3.9.6-eclipse-temurin-22-alpine\n        env:\n        - name: SELENIUM_BROWSER\n          value: '{{ matrix.browser.description }}'\n        - name: SELENIUM_HOST\n          value: '{{ matrix.browser.ip }}:4444'\n      shell: mvn test\n"))),(0,r.kt)(o.Z,{value:"log",label:"Log Output",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"selenium-remote-browsers-example.png",src:n(40269).Z,width:"2156",height:"2134"})))),(0,r.kt)("h3",{id:"run-database-for-integration-tests"},"Run database for integration tests"),(0,r.kt)("p",null,"To test the application, you often want to check if it works well with the external components too.\nAs an example, unit tests won't cover if there is a syntax error in SQL query, or there are deadlocks in the process, unless you will run it against actual database."),(0,r.kt)("p",null,"The example below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start single MongoDB instance as ",(0,r.kt)("inlineCode",{parentName:"li"},"db")," service (",(0,r.kt)("inlineCode",{parentName:"li"},"services.db"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Configure initial credentials to ",(0,r.kt)("inlineCode",{parentName:"li"},"root"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"p4ssw0rd")," (",(0,r.kt)("inlineCode",{parentName:"li"},"services.db.env"),")"),(0,r.kt)("li",{parentName:"ul"},"Wait until the MongoDB accept connections (",(0,r.kt)("inlineCode",{parentName:"li"},"services.db.readinessProbe"),")"))),(0,r.kt)("li",{parentName:"ul"},"Run integration tests (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].run"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Configure ",(0,r.kt)("inlineCode",{parentName:"li"},"API_MONGO_DSN")," environment variable to point to MongoDB (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].run.env[0]"),")"),(0,r.kt)("li",{parentName:"ul"},"Install local dependencies and run tests (",(0,r.kt)("inlineCode",{parentName:"li"},"steps[0].run.shell"),")")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: database-service-example\nspec:\n  content:\n    git:\n      uri: https://github.com/kubeshop/testkube.git\n      revision: develop\n  services:\n    db:\n      image: mongo:latest\n      env:\n      - name: MONGO_INITDB_ROOT_USERNAME\n        value: root\n      - name: MONGO_INITDB_ROOT_PASSWORD\n        value: p4ssw0rd\n      readinessProbe:\n        tcpSocket:\n          port: 27017\n        periodSeconds: 1\n  container:\n    workingDir: /data/repo\n  steps:\n    - name: Run integration tests\n      run:\n        image: golang:1.22.3-bookworm\n        env:\n        - name: API_MONGO_DSN\n          value: mongodb://root:p4ssw0rd@{{services.db.0.ip}}:27017\n        shell: |\n          apt-get update\n          apt-get install -y ca-certificates libssl3 git skopeo\n          go install gotest.tools/gotestsum@v1.9.0\n\n          INTEGRATION=y gotestsum --format short-verbose -- -count 1 -run _Integration -cover ./pkg/repository/...\n")))}d.isMDXComponent=!0},41384:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/example-workflow-with-building-app-and-files-transfer-93a77c4024ac7e8da335d64882a5e220.png"},91770:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/example-workflow-with-mongo-service-8a56a7c36ff2e2f4ddf708281523aa61.png"},71668:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/example-workflow-with-nginx-f141bda220274876c7d300b9a077aed9.png"},40269:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/selenium-remote-browsers-example-be61e97cbc7c21d971eb1e2ab3d9541a.png"}}]);