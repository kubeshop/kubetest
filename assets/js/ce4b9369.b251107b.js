"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[9467],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=u(r),y=o,m=d["".concat(c,".").concat(y)]||d[y]||i[y]||s;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},74721:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>i,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const s={},a="Pytest",p={unversionedId:"test-types/executor-pytest",id:"test-types/executor-pytest",title:"Pytest",description:"This is a simple python based executor for pytest framework https://docs.pytest.org/",source:"@site/docs/test-types/executor-pytest.mdx",sourceDirName:"test-types",slug:"/test-types/executor-pytest",permalink:"/test-types/executor-pytest",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/test-types/executor-pytest.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Postman",permalink:"/test-types/executor-postman"},next:{title:"SoapUI",permalink:"/test-types/executor-soapui"}},c={},u=[{value:"Usage",id:"usage",level:2},{value:"Step 1 - Add the executor to Testkube.",id:"step-1---add-the-executor-to-testkube",level:3},{value:"Step 2 - Build the executor Docker image.",id:"step-2---build-the-executor-docker-image",level:3},{value:"Step 3 - Create a test.",id:"step-3---create-a-test",level:3}],l={toc:u};function i(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pytest"},"Pytest"),(0,o.kt)("p",null,"This is a simple python based executor for pytest framework ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pytest.org/"},"https://docs.pytest.org/"),"\nYou can run pytest with Testkube to use it in your automated tests for your Kubernetes clusters."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Before starting, please switch your current folder to /contrib/container/pytest"),(0,o.kt)("h3",{id:"step-1---add-the-executor-to-testkube"},"Step 1 - Add the executor to Testkube."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"`kubectl apply -f container-executor-pytest.yaml`\n")),(0,o.kt)("h3",{id:"step-2---build-the-executor-docker-image"},"Step 2 - Build the executor Docker image."),(0,o.kt)("p",null,"Current Docker image is based on Python 3.8.17 and a few basic modules, like pipenv, pytest and requests.\nFeel free to change the python version, install missing dependencies, etc. Docker image should be placed in your\nfavourite docker image registry, like local Docker image registry for Minikube, Kind, etc or Cloud provider one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker build -t pytest-executor -f Dockerfile\n")),(0,o.kt)("h3",{id:"step-3---create-a-test"},"Step 3 - Create a test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f pytest_test.yaml\n")),(0,o.kt)("p",null,"And now run the tests to see failed and passed results."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"`kubectl testkube run test container-executor-pytest-failed-sample`\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"`kubectl testkube run test container-executor-pytest-passed-sample`\n")))}i.isMDXComponent=!0}}]);