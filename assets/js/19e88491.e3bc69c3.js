"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[4664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?s.createElement(h,r(r({ref:t},u),{},{components:n})):s.createElement(h,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var s=n(87462),a=(n(67294),n(3905));const i={},r="Test Workflows Examples - Basics",o={unversionedId:"articles/test-workflows-examples-basics",id:"articles/test-workflows-examples-basics",title:"Test Workflows Examples - Basics",description:"Running the Image",source:"@site/docs/articles/test-workflows-examples-basics.md",sourceDirName:"articles",slug:"/articles/test-workflows-examples-basics",permalink:"/articles/test-workflows-examples-basics",draft:!1,editUrl:"https://github.com/kubeshop/testkube/tree/develop/docs/docs/articles/test-workflows-examples-basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Workflow Template",permalink:"/articles/test-workflow-templates"},next:{title:"Test Workflows Examples - Configuration",permalink:"/articles/test-workflows-examples-configuration"}},l={},p=[{value:"Running the Image",id:"running-the-image",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Running the Image",id:"running-the-image-1",level:3},{value:"Using Shell",id:"using-shell",level:2},{value:"Running Shell Commands",id:"running-shell-commands",level:3},{value:"Alternative Syntax",id:"alternative-syntax",level:3},{value:"Fetching the Git Repository",id:"fetching-the-git-repository",level:2},{value:"Fetching Data from Git",id:"fetching-data-from-git",level:3},{value:"Mounting",id:"mounting",level:3},{value:"Fetching a Secured Git Repository",id:"fetching-a-secured-git-repository",level:2},{value:"Usinga Token from A Secret",id:"usinga-token-from-a-secret",level:3},{value:"Using Multiple Steps",id:"using-multiple-steps",level:2},{value:"Running Multiple Steps",id:"running-multiple-steps",level:3},{value:"Container Defaults",id:"container-defaults",level:2},{value:"Setting Up Defaults",id:"setting-up-defaults",level:3},{value:"Notable Nuances",id:"notable-nuances",level:3},{value:"Step Isolation",id:"step-isolation",level:2},{value:"Nested Steps",id:"nested-steps",level:3},{value:"Content and Defaults",id:"content-and-defaults",level:3},{value:"Step Orchestration",id:"step-orchestration",level:2},{value:"Optional Steps",id:"optional-steps",level:3},{value:"Conditional Steps",id:"conditional-steps",level:3},{value:"Retry Mechanism",id:"retry-mechanism",level:3},{value:"Content Files",id:"content-files",level:2},{value:"Provide Static Files",id:"provide-static-files",level:3},{value:"Artifacts",id:"artifacts",level:2},{value:"Saving the Artifacts",id:"saving-the-artifacts",level:3},{value:"Test Suite Like Runs",id:"test-suite-like-runs",level:2},{value:"Run Dependent Test Workflows or Tests",id:"run-dependent-test-workflows-or-tests",level:3},{value:"Job/Pod Configuration",id:"jobpod-configuration",level:2},{value:"Configuring the Job",id:"configuring-the-job",level:3},{value:"Configuring the Pod",id:"configuring-the-pod",level:3}],u={toc:p};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-workflows-examples---basics"},"Test Workflows Examples - Basics"),(0,a.kt)("h2",{id:"running-the-image"},"Running the Image"),(0,a.kt)("p",null,"The Test Workflows spec allows you to provide instructions in setup, steps and after properties."),(0,a.kt)("h3",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"Both setup, steps and after have the same syntax - they are a list of steps. The step is an object that has execution instructions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-1\nspec:\n  steps:\n  - run:\n      image: 'curlimages/curl:7.78.0'\n      args:\n      - 'https://testkube.io'\n")),(0,a.kt)("h3",{id:"running-the-image-1"},"Running the Image"),(0,a.kt)("p",null,"Use a run instruction that has similar syntax to the native Kubernetes\u2019 container. A command exiting with code > 0 is considered a failure."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Running the Image",src:n(34490).Z,width:"512",height:"456"})),(0,a.kt)("h2",{id:"using-shell"},"Using Shell"),(0,a.kt)("h3",{id:"running-shell-commands"},"Running Shell Commands"),(0,a.kt)("p",null,"For simplicity, you can also run shell commands with the ",(0,a.kt)("strong",{parentName:"p"},"run")," instruction and the ",(0,a.kt)("strong",{parentName:"p"},"shell")," property.\nThe script is automatically prepended with ",(0,a.kt)("strong",{parentName:"p"},"set -e"),", so, by default, it will fail the step on any error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-2\nspec:\n  steps:\n  - run:\n      image: 'curlimages/curl:7.78.0'\n      shell: |\n        curl https://testkube.io\n")),(0,a.kt)("h3",{id:"alternative-syntax"},"Alternative Syntax"),(0,a.kt)("p",null,"Alternatively, you can use ",(0,a.kt)("strong",{parentName:"p"},"shell")," directly as an instruction and a default image will be used."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Using Shell",src:n(3413).Z,width:"512",height:"453"})),(0,a.kt)("h2",{id:"fetching-the-git-repository"},"Fetching the Git Repository"),(0,a.kt)("h3",{id:"fetching-data-from-git"},"Fetching Data from Git"),(0,a.kt)("p",null,"To fetch data from the Git, use the git property of content. You may provide the address, revision (commit, branch or tag), along with i.e. token."),(0,a.kt)("p",null,"To avoid fetching all files in mono-repository, you can use paths for sparse checkout."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-3\nspec:\n  content:\n    git:\n      uri: 'https://github.com/kubeshop/testkube'\n      revision: 'main'\n      paths:\n      - 'test/cypress/executor-tests/cypress-12'\n\n  steps:\n  - shell: 'tree /data/repo'\n")),(0,a.kt)("h3",{id:"mounting"},"Mounting"),(0,a.kt)("p",null,"By default the repository is mounted to /data/repo directory. You can control it with mountPath property though."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Mounting",src:n(3828).Z,width:"2048",height:"1802"})),(0,a.kt)("h2",{id:"fetching-a-secured-git-repository"},"Fetching a Secured Git Repository"),(0,a.kt)("h3",{id:"usinga-token-from-a-secret"},"Usinga Token from A Secret"),(0,a.kt)("p",null,"You may provide the Git token and username either as plain-text, or via the tokenFrom and usernameFrom clauses that are the same as native Kubernetes env.*.valueFrom."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-4\nspec:\n  content:\n    git:\n      uri: 'https://github.com/kubeshop/testkube'\n      tokenFrom:\n        secretKeyRef:\n          name: 'private-repo-secret-token'\n          key: 'token'\n\n  steps:\n  - shell: 'tree /data/repo'\n")),(0,a.kt)("h2",{id:"using-multiple-steps"},"Using Multiple Steps"),(0,a.kt)("h3",{id:"running-multiple-steps"},"Running Multiple Steps"),(0,a.kt)("p",null,"To run multiple steps, simply add another step with next instructions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-5\nspec:\n  content:\n    git:\n      uri: 'https://github.com/kubeshop/testkube'\n      revision: 'main'\n      paths:\n      - 'test/cypress/executor-tests/cypress-12'\n\n  steps:\n  - name: 'Install dependencies'\n    run:\n      image: 'cypress/included:13.6.4'\n      workingDir: '/data/repo/test/cypress/executor-tests/cypress-12'\n      shell: 'npm install'\n  - name: 'Run test'\n    run:\n      image: 'cypress/included:13.6.4'\n      workingDir: '/data/repo/test/cypress/executor-tests/cypress-12'\n      shell: 'cypress run'\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Running Multiple Steps",src:n(55241).Z,width:"2048",height:"1826"})),(0,a.kt)("h2",{id:"container-defaults"},"Container Defaults"),(0,a.kt)("h3",{id:"setting-up-defaults"},"Setting Up Defaults"),(0,a.kt)("p",null,"To configure default container settings, you may use the container property.\nIt has a similar syntax to the Kubernetes\u2019 native ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core"},"Container")," spec."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-6b\nspec:\n  content:\n    git:\n      uri: 'https://github.com/kubeshop/testkube'\n      revision: 'main'\n      paths:\n      - 'test/cypress/executor-tests/cypress-12'\n\n  container:\n    image: 'cypress/included:13.6.4'\n    workingDir: '/data/repo/test/cypress/executor-tests/cypress-12'\n    resources:\n      requests:\n        memory: '2Gi'\n        cpu: 2\n\n  steps:\n  - name: 'Install dependencies'\n    shell: 'npm install'\n  - name: 'Run test'\n    shell: 'cypress run'\n")),(0,a.kt)("h3",{id:"notable-nuances"},"Notable Nuances"),(0,a.kt)("p",null,"Thanks to the container and run instructions being similar to native Kubernetes\u2019 container specs, you can easily set the required resources for running."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Default Settings",src:n(10079).Z,width:"2048",height:"1826"})),(0,a.kt)("h2",{id:"step-isolation"},"Step Isolation"),(0,a.kt)("h3",{id:"nested-steps"},"Nested Steps"),(0,a.kt)("p",null,"You can also pass nested setup steps in the step list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-7\nspec:\n  steps:\n  - name: 'Run test'\n    content:\n      git:\n        uri: 'https://github.com/kubeshop/testkube'\n        revision: 'main'\n        paths:\n        - 'test/cypress/executor-tests/cypress-12'\n    container:\n      image: 'cypress/included:13.6.4'\n      workingDir: '/data/repo/test/cypress/executor-tests/cypress-12'\n    steps:\n    - name: 'Install dependencies'\n      shell: 'npm install'\n    - shell: 'cypress run'\n")),(0,a.kt)("h3",{id:"content-and-defaults"},"Content and Defaults"),(0,a.kt)("p",null,"Defaults configured in the step will work similarly to top-level defaults but will be accessible only by the step itself and all steps inside. For example, previous and subsequent steps will not have access to mounted repositories or environment variables."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step Isolation",src:n(23338).Z,width:"2048",height:"1824"})),(0,a.kt)("h2",{id:"step-orchestration"},"Step Orchestration"),(0,a.kt)("h3",{id:"optional-steps"},"Optional Steps"),(0,a.kt)("p",null,"You can add ",(0,a.kt)("strong",{parentName:"p"},"optional:true")," for the step, so that step will not effect the outcome of the orchestration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-8\nspec:\n  steps:\n  - name: 'Step 1'\n    optional: true\n    shell: exit 1\n  - name: 'Step 2'\n    negative: true\n    shell: exit 1\n  - name: 'Step 3'\n    negative: true\n    shell: exit 0\n  - name: 'Step 4'\n    shell: echo hello\n  - name: 'Step 5'\n    condition: always\n    retry:\n      count: 3\n    shell: echo foo; exit 1\n")),(0,a.kt)("h3",{id:"conditional-steps"},"Conditional Steps"),(0,a.kt)("p",null,"By default, the next step will run only when the previous steps have succeeded. This can be controlled with the ",(0,a.kt)("strong",{parentName:"p"},"condition")," property."),(0,a.kt)("p",null,"As an example, ",(0,a.kt)("strong",{parentName:"p"},"condition: always")," will cause the step to always be executed, even if the previous step has failed."),(0,a.kt)("h3",{id:"retry-mechanism"},"Retry Mechanism"),(0,a.kt)("p",null,"It\u2019s possible to automatically retry the step on a failure (or any other condition)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step Orchestration",src:n(41602).Z,width:"2048",height:"1812"})),(0,a.kt)("h2",{id:"content-files"},"Content Files"),(0,a.kt)("h3",{id:"provide-static-files"},"Provide Static Files"),(0,a.kt)("p",null,"A part of the Git repository and regular commands, the Test Workflow can use some static files directly from the spec."),(0,a.kt)("p",null,"These files are mounted from a ConfigMap automatically (unless, instead of content, there is ",(0,a.kt)("strong",{parentName:"p"},"contentFrom")," used with a similar schema as Kubernetes\u2019 ",(0,a.kt)("strong",{parentName:"p"},"env.*.valueFrom"),")."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"When the path is relative, it will be mounted in the container\u2019s working directory.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-9\nspec:\n  content:\n    files:\n    - path: /some/path\n      content: |\n        there is some content file\n        provided.\n    - path: another-file.txt\n      content: |\n        another content\n  steps:\n  - workingDir: /foo/bar\n    shell: |\n      echo "file 1:"\n      cat /some/path\n      echo "file 2:"\n      cat another-file.txt\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Static Files",src:n(45013).Z,width:"2048",height:"1809"})),(0,a.kt)("h2",{id:"artifacts"},"Artifacts"),(0,a.kt)("h3",{id:"saving-the-artifacts"},"Saving the Artifacts"),(0,a.kt)("p",null,"Saving the artifacts is as simple as defining the artifacts instruction and providing the file masks to fetch. There is no need to create additional volumes, the artifacts step has access to all the files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-10\nspec:\n  content:\n    git:\n      uri: 'https://github.com/kubeshop/testkube'\n      paths:\n      - 'test/playwright/executor-tests/playwright-project'\n\n  container:\n    image: 'mcr.microsoft.com/playwright:v1.32.3'\n    workingDir: '/data/repo/test/playwright/executor-tests/playwright-project'\n    resources:\n      requests:\n        memory: '2Gi'\n        cpu: 2\n\n  steps:\n  - shell: 'npm ci'\n  - shell: 'npx playwright test --workers 2 --reporter html'\n  - condition: always\n    artifacts:\n      paths:\n      - 'playwright-report/**/*'\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Artifacts",src:n(81994).Z,width:"512",height:"454"}),"  "),(0,a.kt)("h2",{id:"test-suite-like-runs"},"Test Suite Like Runs"),(0,a.kt)("h3",{id:"run-dependent-test-workflows-or-tests"},"Run Dependent Test Workflows or Tests"),(0,a.kt)("p",null,"To run other Test Workflows or Tests, you can use the ",(0,a.kt)("strong",{parentName:"p"},"execute")," instruction."),(0,a.kt)("p",null,"You can define the number of concurrent executions with ",(0,a.kt)("strong",{parentName:"p"},"parallelism")," as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-11\nspec:\n  steps:\n  - execute:\n      tests:\n      - name: 'example-test'\n      workflows:\n      - name: 'overview--example-3'\n      - name: 'overview--example-5'\n      - name: 'overview--example-8'\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Dependent Tests",src:n(81670).Z,width:"2048",height:"1819"})," "),(0,a.kt)("h2",{id:"jobpod-configuration"},"Job/Pod Configuration"),(0,a.kt)("h3",{id:"configuring-the-job"},"Configuring the Job"),(0,a.kt)("p",null,"By using the ",(0,a.kt)("strong",{parentName:"p"},"job")," property, you can configure labels and annotations of the Job."),(0,a.kt)("h3",{id:"configuring-the-pod"},"Configuring the Pod"),(0,a.kt)("p",null,"By using the ",(0,a.kt)("strong",{parentName:"p"},"pod")," property, you can configure labels, annotations, serviceAccountName, imagePullSecrets, volumes, or other properties of a ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#podspec-v1-core"},"PodSpec"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: testworkflows.testkube.io/v1\nkind: TestWorkflow\nmetadata:\n  name: overview--example-12\nspec:\n  job:\n    labels:\n      job-label: 'foobar'\n  pod:\n    labels:\n      pod-label: 'barfoo'\n    serviceAccountName: 'testkube-api-server'\n    imagePullSecrets:\n    - name: 'dockerhub-secret'\n")))}c.isMDXComponent=!0},81994:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/artifacts-01ba5aa02f4db845bc9e3d0555328716.png"},10079:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/default-settings-84c08b75671a16595421e5a3a57c9220.png"},81670:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/dependent-tests-5934a16b4c614cfe8af8925734a51c73.png"},3828:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/mounting-9f56d2559eac4a5e8bea9ebe7b85e941.png"},34490:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/running-image-569517bf2f0b2efe128e39485aa9ebcc.png"},55241:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/running-multiple-steps-84c08b75671a16595421e5a3a57c9220.png"},45013:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/static-files-fb14cb33e582b304592747f2230e9785.png"},23338:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/step-isolation-73b4a0c773f42f8f8b97a8cd08d47a64.png"},41602:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/step-orchestration-9a727360c3617aa2fe7fbf904e60be34.png"},3413:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/using-shell-f300394f84f41bd885b1383601fd2f8d.png"}}]);