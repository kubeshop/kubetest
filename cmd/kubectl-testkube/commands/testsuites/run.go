package testsuites

import (
	"fmt"
	"strings"
	"time"

	"github.com/kubeshop/testkube/cmd/kubectl-testkube/commands/common"
	"github.com/kubeshop/testkube/pkg/api/v1/testkube"
	"github.com/kubeshop/testkube/pkg/ui"
	"github.com/spf13/cobra"
)

const WatchInterval = 2 * time.Second

func NewRunTestSuiteCmd() *cobra.Command {
	var (
		name                     string
		watchEnabled             bool
		params                   map[string]string
		downloadArtifactsEnabled bool
		downloadDir              string
		selectors                []string
		concurrencyLevel         int
	)

	cmd := &cobra.Command{
		Use:     "testsuite <testSuiteName>",
		Aliases: []string{"ts"},
		Short:   "Starts new test suite",
		Long:    `Starts new test suite based on TestSuite Custom Resource name, returns results to console`,
		Run: func(cmd *cobra.Command, args []string) {
			ui.Logo()

			startTime := time.Now()
			client, namespace := common.GetClient(cmd)

			var executions []testkube.TestSuiteExecution
			var err error

			switch {
			case len(args) > 0:
				testSuiteName := args[0]
				namespacedName := fmt.Sprintf("%s/%s", namespace, testSuiteName)

				execution, err := client.ExecuteTestSuite(testSuiteName, name, params)
				ui.ExitOnError("starting test suite execution "+namespacedName, err)
				executions = append(executions, execution)
			case len(selectors) != 0:
				selector := strings.Join(selectors, ",")
				executions, err = client.ExecuteTestSuites(selector, concurrencyLevel, params)
				ui.ExitOnError("starting test suite executions "+selector, err)
			default:
				ui.Failf("Pass Test suite name or labels to run by labels ")
			}

			var hasErrors bool
			for _, execution := range executions {
				if execution.IsFailed() {
					hasErrors = true
				}

				if execution.Id != "" {
					if watchEnabled && len(args) > 0 {
						executionCh, err := client.WatchTestSuiteExecution(execution.Id)
						for execution := range executionCh {
							ui.ExitOnError("watching test execution", err)
							printExecution(execution, startTime)
						}
					}

					execution, err = client.GetTestSuiteExecution(execution.Id)
				}

				printExecution(execution, startTime)
				ui.ExitOnError("getting recent execution data id:"+execution.Id, err)

				uiPrintExecutionStatus(execution)

				uiShellTestSuiteGetCommandBlock(execution.Id)
				if execution.Id != "" {
					if !watchEnabled || len(args) == 0 {
						uiShellTestSuiteWatchCommandBlock(execution.Id)
					}
				}
			}

			if hasErrors {
				ui.ExitOnError("executions contain failed on errors")
			}
		},
	}

	cmd.Flags().StringVarP(&name, "name", "n", "", "execution name, if empty will be autogenerated")
	cmd.Flags().StringToStringVarP(&params, "param", "p", map[string]string{}, "execution envs passed to executor")
	cmd.Flags().BoolVarP(&watchEnabled, "watch", "f", false, "watch for changes after start")
	cmd.Flags().StringVar(&downloadDir, "download-dir", "artifacts", "download dir")
	cmd.Flags().BoolVarP(&downloadArtifactsEnabled, "download-artifacts", "a", false, "download artifacts automatically")
	cmd.Flags().StringSliceVarP(&selectors, "label", "l", nil, "label key value pair: --label key1=value1")
	cmd.Flags().IntVar(&concurrencyLevel, "concurrency", 10, "concurrency level for multiple test suite execution")

	return cmd
}
