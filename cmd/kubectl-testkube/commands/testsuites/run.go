package testsuites

import (
	"fmt"
	"time"

	"github.com/kubeshop/testkube/cmd/kubectl-testkube/commands/common"
	"github.com/kubeshop/testkube/cmd/kubectl-testkube/commands/common/validator"
	"github.com/kubeshop/testkube/pkg/ui"
	"github.com/spf13/cobra"
)

const WatchInterval = 2 * time.Second

func NewRunTestSuiteCmd() *cobra.Command {
	var (
		name                     string
		watchEnabled             bool
		params                   map[string]string
		downloadArtifactsEnabled bool
		downloadDir              string
	)

	cmd := &cobra.Command{
		Use:     "testsuite <testSuiteName>",
		Aliases: []string{"ts"},
		Short:   "Starts new test suite",
		Long:    `Starts new test suite based on TestSuite Custom Resource name, returns results to console`,
		Args:    validator.TestSuiteName,
		Run: func(cmd *cobra.Command, args []string) {
			ui.Logo()

			testSuiteName := args[0]
			startTime := time.Now()

			client, namespace := common.GetClient(cmd)
			namespacedName := fmt.Sprintf("%s/%s", namespace, testSuiteName)

			execution, err := client.ExecuteTestSuite(testSuiteName, namespace, name, params)
			ui.ExitOnError("starting test suite execution "+namespacedName, err)

			if execution.Id != "" {
				if watchEnabled {
					executionCh, err := client.WatchTestSuiteExecution(execution.Id)
					for execution := range executionCh {
						ui.ExitOnError("watching test execution", err)
						printExecution(execution, startTime)
					}
				}

				execution, err = client.GetTestSuiteExecution(execution.Id)
			}

			printExecution(execution, startTime)
			ui.ExitOnError("getting recent execution data id:"+execution.Id, err)

			uiPrintExecutionStatus(execution)

			uiShellTestSuiteGetCommandBlock(execution.Id)
			if execution.Id != "" {
				if !watchEnabled {
					uiShellTestSuiteWatchCommandBlock(execution.Id)
				}
			}
		},
	}

	cmd.Flags().StringVarP(&name, "name", "n", "", "execution name, if empty will be autogenerated")
	cmd.Flags().StringToStringVarP(&params, "param", "p", map[string]string{}, "execution envs passed to executor")
	cmd.Flags().BoolVarP(&watchEnabled, "watch", "f", false, "watch for changes after start")
	cmd.Flags().StringVar(&downloadDir, "download-dir", "artifacts", "download dir")
	cmd.Flags().BoolVarP(&downloadArtifactsEnabled, "download-artifacts", "a", false, "downlaod artifacts automatically")

	return cmd
}
