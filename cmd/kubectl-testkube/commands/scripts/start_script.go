package scripts

import (
	"fmt"
	"os"
	"time"

	"github.com/kubeshop/testkube/pkg/api/v1/testkube"
	"github.com/kubeshop/testkube/pkg/ui"
	"github.com/spf13/cobra"
)

const WatchInterval = 2 * time.Second

func NewStartScriptCmd() *cobra.Command {
	var (
		name                     string
		watchEnabled             bool
		params                   map[string]string
		downloadArtifactsEnabled bool
		downloadDir              string
	)

	cmd := &cobra.Command{
		Use:     "start",
		Aliases: []string{"run"},
		Short:   "Starts new script",
		Long:    `Starts new script based on Script Custom Resource name, returns results to console`,
		Run: func(cmd *cobra.Command, args []string) {
			ui.Logo()

			if len(args) == 0 {
				ui.ExitOnError("Invalid arguments", fmt.Errorf("please pass script name to run"))
			}

			scriptID := args[0]

			client, namespace := GetClient(cmd)
			namespacedName := fmt.Sprintf("%s/%s", namespace, scriptID)

			execution, err := client.ExecuteScript(scriptID, namespace, name, params)
			ui.ExitOnError("starting script execution "+namespacedName, err)

			printExecutionDetails(execution)

			if watchEnabled {
				watchLogs(execution.Id, client)
			}

			execution, err = client.GetExecution("-", execution.Id)
			ui.ExitOnError("getting recent execution data id:"+execution.Id, err)

			uiPrintStatus(execution)

			if downloadArtifactsEnabled {
				DownloadArtifacts(execution.Id, downloadDir, client)
			}

			uiShellCommandBlock(execution.Id)
		},
	}

	cmd.Flags().StringVarP(&name, "name", "n", "", "execution name, if empty will be autogenerated")
	cmd.Flags().StringToStringVarP(&params, "param", "p", map[string]string{}, "execution envs passed to executor")
	cmd.Flags().BoolVarP(&watchEnabled, "watch", "f", false, "watch for changes after start")
	cmd.Flags().StringVar(&downloadDir, "download-dir", "artifacts", "download dir")
	cmd.Flags().BoolVarP(&downloadArtifactsEnabled, "download-artifacts", "a", false, "downlaod artifacts automatically")

	return cmd
}

func uiPrintStatus(execution testkube.Execution) {
	result := execution.ExecutionResult

	switch true {
	case result.IsQueued():
		ui.Warn("Script queued for execution")

	case result.IsPending():
		ui.Warn("Script execution started")

	case result.IsSuccesful():
		fmt.Println(result.Output)
		duration := execution.EndTime.Sub(execution.StartTime)
		ui.Success("Script execution completed with sucess in " + duration.String())

	case result.IsFailed():
		fmt.Println(result.ErrorMessage)
		ui.Errf("Script execution failed")
		os.Exit(1)
	}

	ui.NL()
}

func uiShellCommandBlock(id string) {
	ui.ShellCommand(
		"Use following command to get script execution details",
		"kubectl testkube scripts execution "+id,
	)
	ui.ShellCommand(
		"or watch script execution until complete",
		"kubectl testkube scripts watch "+id,
	)

	ui.NL()
}
