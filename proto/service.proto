syntax = "proto3";

package cloud;

option go_package = "pkg/cloud";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

service TestKubeCloudAPI {
    // Deprecated, use ExecuteAsync instead,
    // Will remove this after we fully migrate to ExecuteAsync.
    rpc Execute(stream ExecuteResponse) returns (stream ExecuteRequest);
    rpc Send(stream WebsocketData)      returns (google.protobuf.Empty);
    rpc Call(CommandRequest)            returns (CommandResponse);
    rpc ExecuteAsync(stream ExecuteResponse) returns (stream ExecuteRequest);
    rpc GetLogsStream(stream LogsStreamResponse) returns (stream LogsStreamRequest);
    rpc GetTestWorkflowNotificationsStream(stream TestWorkflowNotificationsResponse) returns (stream TestWorkflowNotificationsRequest);
    rpc GetTestWorkflowServiceNotificationsStream(stream TestWorkflowServiceNotificationsResponse) returns (stream TestWorkflowServiceNotificationsRequest);
    rpc GetTestWorkflowParallelStepNotificationsStream(stream TestWorkflowParallelStepNotificationsResponse) returns (stream TestWorkflowParallelStepNotificationsRequest);    
    rpc GetProContext(google.protobuf.Empty) returns (ProContextResponse);
    rpc GetCredential(CredentialRequest) returns (CredentialResponse);
}

enum LogsStreamRequestType {
  STREAM_LOG_MESSAGE = 0;
  STREAM_HEALTH_CHECK = 1;
}

enum TestWorkflowNotificationsRequestType {
  WORKFLOW_STREAM_LOG_MESSAGE = 0;
  WORKFLOW_STREAM_HEALTH_CHECK = 1;
}

enum TestWorkflowNotificationType {
  WORKFLOW_STREAM_ERROR = 0;
  WORKFLOW_STREAM_LOG = 1;
  WORKFLOW_STREAM_RESULT = 2;
  WORKFLOW_STREAM_OUTPUT = 3;
}

message LogsStreamRequest {
  string stream_id = 1;
  string execution_id = 2;
  LogsStreamRequestType request_type = 3;
}

message LogsStreamResponse {
  string stream_id = 1;
  int64 seq_no = 2;
  string log_message = 3;
  bool is_error = 4;
}

message CommandRequest {
  string command = 1;
  google.protobuf.Struct payload  = 2;
}

message CommandResponse {
  bytes response     = 1;
}

message ExecuteRequest {
    string method                    = 1;
    string url                       = 2;
    map<string, HeaderValue> headers = 3;
    bytes body                       = 4;
    string message_id                = 5;
}

message TestWorkflowNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  TestWorkflowNotificationsRequestType request_type = 3;
}

message TestWorkflowNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}

message ProContextResponse {
  string org_id = 1;
  string env_id = 2;
  repeated Capability capabilities = 3;
}

message Capability {
  string name = 1;
  bool enabled = 2;
}

message HeaderValue {
   repeated string header = 1;
}

message ExecuteResponse {
    int64 status                     = 1;
    map<string, HeaderValue> headers = 2;
    bytes body                       = 3;
    string message_id                = 4;
}

enum Opcode {
  UNSPECFIED   = 0;
  TEXT_FRAME   = 1;
  BINARY_FRAME = 2;
  HEALTH_CHECK = 3;
}

message WebsocketData {
    Opcode opcode = 1;
    bytes body    = 2;
}

message CredentialRequest {
  string name = 1;
  string execution_id = 2;
}

message CredentialResponse {
  bytes content = 1;
}

message TestWorkflowServiceNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  string service_name = 3;
  int32 service_index = 4; 
  TestWorkflowNotificationsRequestType request_type = 5;
}

message TestWorkflowServiceNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}

message TestWorkflowParallelStepNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  string ref = 3;
  int32  worker_index = 4; 
  TestWorkflowNotificationsRequestType request_type = 5;
}

message TestWorkflowParallelStepNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}
