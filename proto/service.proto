syntax = "proto3";

package cloud;

option go_package = "pkg/cloud";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

service TestKubeCloudAPI {
    // Deprecated, use ExecuteAsync instead,
    // Will remove this after we fully migrate to ExecuteAsync.
    rpc Execute(stream ExecuteResponse) returns (stream ExecuteRequest);
    rpc Send(stream WebsocketData)      returns (google.protobuf.Empty);
    rpc Call(CommandRequest)            returns (CommandResponse);
    rpc ExecuteAsync(stream ExecuteResponse) returns (stream ExecuteRequest);
    rpc GetLogsStream(stream LogsStreamResponse) returns (stream LogsStreamRequest);
    rpc GetTestWorkflowNotificationsStream(stream TestWorkflowNotificationsResponse) returns (stream TestWorkflowNotificationsRequest);
    rpc GetTestWorkflowServiceNotificationsStream(stream TestWorkflowServiceNotificationsResponse) returns (stream TestWorkflowServiceNotificationsRequest);
    rpc GetTestWorkflowParallelStepNotificationsStream(stream TestWorkflowParallelStepNotificationsResponse) returns (stream TestWorkflowParallelStepNotificationsRequest);
    rpc GetProContext(google.protobuf.Empty) returns (ProContextResponse);
    rpc GetCredential(CredentialRequest) returns (CredentialResponse);
    rpc GetEventStream(EventStreamRequest) returns (stream Event); // TODO: Healthcheck (?)
    rpc ScheduleExecution(ScheduleRequest) returns (stream ScheduleResponse);

    // Runner
    rpc GetUnfinishedExecutions(google.protobuf.Empty) returns (stream UnfinishedExecution);
    rpc GetRunnerRequests(stream RunnerResponse) returns (stream RunnerRequest); // TODO: Healthcheck (?)
    rpc InitExecution(InitExecutionRequest) returns (InitExecutionResponse);
    rpc GetExecution(GetExecutionRequest) returns (GetExecutionResponse);
    rpc UpdateExecutionResult(UpdateExecutionResultRequest) returns (UpdateExecutionResultResponse);
    rpc UpdateExecutionOutput(UpdateExecutionOutputRequest) returns (UpdateExecutionOutputResponse); // TODO: Replace with AppendOutput
    rpc SaveExecutionLogsPresigned(SaveExecutionLogsPresignedRequest) returns (SaveExecutionLogsPresignedResponse);
    rpc ObtainExecution(ObtainExecutionRequest) returns (ObtainExecutionResponse);
    rpc FinishExecution(FinishExecutionRequest) returns (FinishExecutionResponse);

    // CRD Synchronisation
    // -- Test Workflows
    rpc GetTestWorkflow(GetTestWorkflowRequest) returns (GetTestWorkflowResponse);
    rpc ListTestWorkflows(ListTestWorkflowsRequest) returns (stream TestWorkflowListItem);
    rpc ListTestWorkflowLabels(ListTestWorkflowLabelsRequest) returns (ListTestWorkflowLabelsResponse);
    rpc CreateTestWorkflow(CreateTestWorkflowRequest) returns (CreateTestWorkflowResponse);
    rpc UpdateTestWorkflow(UpdateTestWorkflowRequest) returns (UpdateTestWorkflowResponse);
    rpc DeleteTestWorkflow(DeleteTestWorkflowRequest) returns (DeleteTestWorkflowResponse);
    rpc DeleteTestWorkflowsByLabels(DeleteTestWorkflowsByLabelsRequest) returns (DeleteTestWorkflowsByLabelsResponse);
    // -- Test Workflow Templates
    rpc GetTestWorkflowTemplate(GetTestWorkflowTemplateRequest) returns (GetTestWorkflowTemplateResponse);
    rpc ListTestWorkflowTemplates(ListTestWorkflowTemplatesRequest) returns (stream TestWorkflowTemplateListItem);
    rpc ListTestWorkflowTemplateLabels(ListTestWorkflowTemplateLabelsRequest) returns (ListTestWorkflowTemplateLabelsResponse);
    rpc CreateTestWorkflowTemplate(CreateTestWorkflowTemplateRequest) returns (CreateTestWorkflowTemplateResponse);
    rpc UpdateTestWorkflowTemplate(UpdateTestWorkflowTemplateRequest) returns (UpdateTestWorkflowTemplateResponse);
    rpc DeleteTestWorkflowTemplate(DeleteTestWorkflowTemplateRequest) returns (DeleteTestWorkflowTemplateResponse);
    rpc DeleteTestWorkflowTemplatesByLabels(DeleteTestWorkflowTemplatesByLabelsRequest) returns (DeleteTestWorkflowTemplatesByLabelsResponse);
}

enum LogsStreamRequestType {
  STREAM_LOG_MESSAGE = 0;
  STREAM_HEALTH_CHECK = 1;
}

enum TestWorkflowNotificationsRequestType {
  WORKFLOW_STREAM_LOG_MESSAGE = 0;
  WORKFLOW_STREAM_HEALTH_CHECK = 1;
}

enum TestWorkflowNotificationType {
  WORKFLOW_STREAM_ERROR = 0;
  WORKFLOW_STREAM_LOG = 1;
  WORKFLOW_STREAM_RESULT = 2;
  WORKFLOW_STREAM_OUTPUT = 3;
}

message LogsStreamRequest {
  string stream_id = 1;
  string execution_id = 2;
  LogsStreamRequestType request_type = 3;
}

message LogsStreamResponse {
  string stream_id = 1;
  int64 seq_no = 2;
  string log_message = 3;
  bool is_error = 4;
}

message CommandRequest {
  string command = 1;
  google.protobuf.Struct payload  = 2;
}

message CommandResponse {
  bytes response     = 1;
}

message ExecuteRequest {
    string method                    = 1;
    string url                       = 2;
    map<string, HeaderValue> headers = 3;
    bytes body                       = 4;
    string message_id                = 5;
}

message TestWorkflowNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  string environment_id = 4;
  TestWorkflowNotificationsRequestType request_type = 3;
}

message TestWorkflowNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}

enum TestkubeMode {
  Enterprise = 0;
  Pro = 1;
}

enum PlanStatus {
    Active             = 0;
    Canceled           = 1;
    Incomplete         = 2;
    IncompleteExpired  = 3;
    PastDue            = 4;
    Trailing           = 5;
    Unpaid             = 6;
    Deleted            = 7;
    Locked             = 8;
    Blocked            = 9;
}

message ProContextResponse {
  string org_id = 1;
  string env_id = 2;
  repeated Capability capabilities = 3;
  bool trial = 4;
  TestkubeMode mode = 5;
  PlanStatus status = 6;
}

message Capability {
  string name = 1;
  bool enabled = 2;
}

message HeaderValue {
   repeated string header = 1;
}

message ExecuteResponse {
    int64 status                     = 1;
    map<string, HeaderValue> headers = 2;
    bytes body                       = 3;
    string message_id                = 4;
}

enum Opcode {
  UNSPECFIED   = 0;
  TEXT_FRAME   = 1;
  BINARY_FRAME = 2;
  HEALTH_CHECK = 3;
}

message WebsocketData {
    Opcode opcode = 1;
    bytes body    = 2;
}

message CredentialRequest {
  string name = 1;
  string execution_id = 2;
}

message CredentialResponse {
  bytes content = 1;
}

message TestWorkflowServiceNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  string environment_id = 6;
  string service_name = 3;
  int32 service_index = 4;
  TestWorkflowNotificationsRequestType request_type = 5;
}

message TestWorkflowServiceNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}

message TestWorkflowParallelStepNotificationsRequest {
  string stream_id = 1;
  string execution_id = 2;
  string environment_id = 6;
  string ref = 3;
  int32  worker_index = 4;
  TestWorkflowNotificationsRequestType request_type = 5;
}

message TestWorkflowParallelStepNotificationsResponse {
  string stream_id = 1;
  uint32 seq_no = 2;
  string timestamp = 3;
  string ref = 4;
  TestWorkflowNotificationType type = 5;
  string message = 6; // based on type: log/error = inline, others = serialized to JSON
}

message ScheduleResourceSelector {
  string name = 1;
  map<string, string> labels = 2;
}

message ScheduleExecution {
  ScheduleResourceSelector selector = 1;
  map<string, string> config = 2;
  string execution_name = 3;
  map<string, string> tags = 4;
}

enum RunningContextType {
  UNKNOWN = 0;
  UI = 1;
  CLI = 2;
  CICD = 3;
  CRON = 4;
  TESTTRIGGER = 5;
  KUBERNETESOBJECT = 6;
  EXECUTION = 7;
}

message RunningContext {
  string name = 1;
  RunningContextType type = 2;
}

message UserSignature {
  string name = 1;
  string email = 2;
}

message ScheduleRequest {
  // Target
  string environment_id = 1;

  // Test Workflow details
  repeated ScheduleExecution executions = 2;

  // Execution details
  bool disable_webhooks = 3;
  map<string, string> tags = 4;

  // Running metadata
  RunningContext running_context = 5;
  repeated string parent_execution_ids = 7;
  optional UserSignature user = 8; // keep in mind that it should not be trusted

  // Kubernetes resource TODO: is it required?
  string kubernetes_object_name = 9;
}

message ScheduleResponse {
  bytes execution = 1; // TestWorkflowExecution
}

message EventResource {
  string type = 1;
  string id = 2;
}

message EventStreamRequest {
  string environment_id = 1;
  repeated EventResource accept = 2;
}

message Event {
  string id = 1;
  EventResource resource = 3;
  string type = 4;
  bytes data = 5;
}

message RunnerRequest {
  string environment_id = 1;
  string id = 2;
}

message RunnerResponse {
  string environment_id = 1;
  string id = 2;
  bool obtained = 3;
  optional string error = 4;
}

message UnfinishedExecution {
  string environment_id = 1;
  string id = 2;
}

message ObtainExecutionRequest {
  string environment_id = 1;
  string id = 2;
}

message ObtainExecutionResponse {
  bool success = 1;
}

message GetExecutionRequest {
  string environment_id = 1;
  string id = 2;
}

message GetExecutionResponse {
  bytes execution = 1; // TestWorkflowExecution
}

message InitExecutionRequest {
  string environment_id = 1;
  string id = 2;
  string namespace = 3;
  bytes signature = 4; // []TestWorkflowSignature
}

message InitExecutionResponse {
}

message UpdateExecutionResultRequest {
  string environment_id = 1;
  string id = 2;
  bytes result = 3; // TestWorkflowResult
}

message UpdateExecutionResultResponse {
}

message ExecutionOutput {
  string ref = 1;
  string name = 2;
  bytes value = 3;
}

message UpdateExecutionOutputRequest {
  string environment_id = 1;
  string id = 2;
  repeated ExecutionOutput output = 3;
}

message UpdateExecutionOutputResponse {
}

message SaveExecutionLogsPresignedRequest {
  string environment_id = 1;
  string id = 2;
}

message SaveExecutionLogsPresignedResponse {
  string url = 3;
}

message FinishExecutionRequest {
  string environment_id = 1;
  string id = 2;
  bytes result = 3; // TestWorkflowResult
}

message FinishExecutionResponse {
}

// CRD Synchronisation -- Test Workflows

message GetTestWorkflowRequest {
  string environment_id = 1;
  string name = 2;
}

message GetTestWorkflowResponse {
  bytes workflow = 1;
}

message ListTestWorkflowsRequest {
  string environment_id = 1;
  uint32 offset = 2;
  uint32 limit = 3;
  map<string, string> labels = 4;
  string textSearch = 5;
}

message TestWorkflowListItem {
  bytes workflow = 1;
}

message LabelListItem {
  string name = 1;
  repeated string value = 2;
}

message ListTestWorkflowLabelsRequest {
  string environment_id = 1;
}

message ListTestWorkflowLabelsResponse {
  repeated LabelListItem labels = 1;
}

message CreateTestWorkflowRequest {
  string environment_id = 1;
  bytes workflow = 2;
}

message CreateTestWorkflowResponse {}

message UpdateTestWorkflowRequest {
  string environment_id = 1;
  bytes workflow = 2;
}

message UpdateTestWorkflowResponse {}

message DeleteTestWorkflowRequest {
  string environment_id = 1;
  string name = 2;
}

message DeleteTestWorkflowResponse {}

message DeleteTestWorkflowsByLabelsRequest {
  string environment_id = 1;
  map<string, string> labels = 2;
}

message DeleteTestWorkflowsByLabelsResponse {
  uint32 count = 1;
}

// CRD Synchronisation -- Test Workflow Templates

message GetTestWorkflowTemplateRequest {
  string environment_id = 1;
  string name = 2;
}

message GetTestWorkflowTemplateResponse {
  bytes template = 1;
}

message ListTestWorkflowTemplatesRequest {
  string environment_id = 1;
  uint32 offset = 2;
  uint32 limit = 3;
  map<string, string> labels = 4;
  string textSearch = 5;
}

message TestWorkflowTemplateListItem {
  bytes template = 1;
}

message ListTestWorkflowTemplateLabelsRequest {
  string environment_id = 1;
}

message ListTestWorkflowTemplateLabelsResponse {
  repeated LabelListItem labels = 1;
}

message CreateTestWorkflowTemplateRequest {
  string environment_id = 1;
  bytes template = 2;
}

message CreateTestWorkflowTemplateResponse {}

message UpdateTestWorkflowTemplateRequest {
  string environment_id = 1;
  bytes template = 2;
}

message UpdateTestWorkflowTemplateResponse {}

message DeleteTestWorkflowTemplateRequest {
  string environment_id = 1;
  string name = 2;
}

message DeleteTestWorkflowTemplateResponse {}

message DeleteTestWorkflowTemplatesByLabelsRequest {
  string environment_id = 1;
  map<string, string> labels = 2;
}

message DeleteTestWorkflowTemplatesByLabelsResponse {
  uint32 count = 1;
}
