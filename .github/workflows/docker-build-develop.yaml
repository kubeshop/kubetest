name: Docker images build develop
on:
  workflow_call:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-*"
    branches:
      - develop
      - ci/cache-optimization
    paths-ignore:
      - 'docs/**'
env:
  ALPINE_IMAGE: alpine:3.18.0

jobs:
#  api:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-api
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get github sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-api-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          ANALYTICS_TRACKING_ID: ${{secrets.TESTKUBE_API_GA_MEASUREMENT_ID}}
#          ANALYTICS_API_KEY: ${{secrets.TESTKUBE_API_GA_MEASUREMENT_SECRET}}
#          SLACK_BOT_CLIENT_ID: ${{secrets.TESTKUBE_SLACK_BOT_CLIENT_ID}}
#          SLACK_BOT_CLIENT_SECRET: ${{secrets.TESTKUBE_SLACK_BOT_CLIENT_SECRET}}
#          SEGMENTIO_KEY: ${{secrets.TESTKUBE_API_SEGMENTIO_KEY}}
#          CLOUD_SEGMENTIO_KEY: ${{secrets.TESTKUBE_API_CLOUD_SEGMENTIO_KEY}}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#          ALPINE_IMAGE: ${{ env.ALPINE_IMAGE }}
#
#      - name: Push Docker images
#        run: |
#          docker push kubeshop/testkube-api-server:${{ steps.github_sha.outputs.sha_short }}

#  single_executor:
#    strategy:
#      matrix:
#        executor: [artillery, curl, example, ginkgo, k6, kubepug, postman, soapui, init, scraper, template, tracetest, zap ]
#
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-${{ matrix.executor }}
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Step
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          EXECUTOR: ${{ matrix.executor }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#          ALPINE_IMAGE: ${{ env.ALPINE_IMAGE }}
#
#      - name: Push Docker images
#        run: |
#          docker push kubeshop/testkube-${{ matrix.executor }}-executor:${{ steps.github_sha.outputs.sha_short }}
#
#  executor_jmeter:
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-jmeter
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-jmeter-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#
#      - name: Push Docker images
#        run: |
#          docker push kubeshop/testkube-jmeter-executor:${{ steps.github_sha.outputs.sha_short }}

  executor_jmeterd:
    strategy:
      matrix:
        GOARCH: [ amd64, arm64 ]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

#      - uses: actions/setup-go@v3
#        with:
#          go-version: 1.21
#          cache: true

#      - uses: actions/setup-go@v3
#        with:
#          go-version: 1.21
#          cache: true

      - name: Go Cache dep
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.GOARCH }}-go-${{ hashFiles('**/go.sum') }}

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: dist/linux_${{ matrix.GOARCH }}
#            ~/go/pkg/mod
#            ~/.cache/go-build
        #     dist/linux_${{ matrix.GOARCH }}
          key: linux_${{ matrix.GOARCH }}
#          restore-keys: |
#            ${{ runner.os }}-go-
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-jmeterd_${{ matrix.GOARCH }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - id: cache
#        uses: actions/cache@v3
#        with:
#          path: dist/linux
#          key: linux-jmeterd_${{ matrix.GOARCH }}

      - name: Release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser-pro
          version: latest
          args: release -f goreleaser_files/.goreleaser-docker-build-executor-jmeterd-commit-only.yml --clean --split
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
          DOCKER_BUILDX_CACHE_FROM: "type=gha"
          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
          GOARCH: ${{ matrix.GOARCH }}

  image:
    runs-on: ubuntu-latest
    needs: executor_jmeterd
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/cache@v3
        with:
          path: dist/linux_arm64
          key: linux_arm64

      - uses: actions/cache@v3
        with:
          path: dist/linux_amd64
          key: linux_amd64

      - name: Release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser-pro
          version: latest
          args: continue --merge
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
          DOCKER_BUILDX_CACHE_FROM: "type=gha"
          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"

#      - name: Push multi-arch image to the Registry
#        run: |
#          docker push kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-amd64
#          docker push kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-arm64
#          docker manifest create kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }} --amend kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-amd64 --amend kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-arm64v8
#          docker manifest push -p kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}
#  release:
#    runs-on: ubuntu-latest
#    needs: executor_jmeterd
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v3
#
#      - uses: actions/setup-go@v3
#        with:
#          go-version: 1.21
#          cache: true

      # copy the cashes from prepare
#      - shell: bash
#        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#
#      - uses: actions/cache@v3
#        with:
#          path: dist/linux_arm64
#          key: linux_arm64
#      - uses: actions/cache@v3
#        with:
#          path: dist/linux_amd64
#          key: linux_amd64


      #      - uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-jmeterd-amd64
#
#      - uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-jmeterd-arm64

#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser-pro
#          version: latest
#          args: continue --merge
#        env:
#          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"


#      - name: Push multi-arch image to the Registry
#        run: |
#          docker push kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-amd64
#          docker push kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-arm64v8
#
#          docker manifest create kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }} --amend kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-amd64 --amend kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}-arm64v8
#          docker manifest push -p kubeshop/testkube-jmeterd-executor:${{ steps.commit.outputs.short }}

#  jmeterd_slave:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Docker Cache
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      - id: commit
#        uses: prompt/actions-commit-hash@v3
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./contrib/executor/jmeterd/build/slaves/Dockerfile
#          push: true
#          tags:  kubeshop/testkube-jmeterd-slave:${{ steps.commit.outputs.short }},kubeshop/testkube-jmeterd-slave:latest
#          platforms: linux/amd64,linux/arm64
#
#  executor_maven:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-maven
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-maven-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#
#      - name: Push Docker images
#        run: |
#          docker push kubeshop/testkube-maven-executor:${{ steps.github_sha.outputs.sha_short }}
#
#  executor_gradle:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-gradle
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-gradle-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#
#      - name: Push Docker images
#        run: |
#          docker push kubeshop/testkube-gradle-executor:${{ steps.github_sha.outputs.sha_short }}
#
#  executor_cypress:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-cypress
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-cypress-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#
#      - name: Push image to the Registry
#        run: |
#          docker push kubeshop/testkube-cypress-executor:${{ steps.github_sha.outputs.sha_short }}
#
#  executor_playwright:
#    runs-on: ubuntu-latest
#    steps:
#      -  name: Checkout
#         uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Setup Go
#        uses: ./.github/actions/setup-go
#        with:
#          cache-prefix: go-build-playwright
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Release
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release -f goreleaser_files/.goreleaser-docker-build-executor-playwright-commit-only.yml --snapshot
#        env:
#          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
#          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
#          DOCKER_BUILDX_CACHE_FROM: "type=gha"
#          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
#
#      - name: Push image to the Registry
#        run: |
#          docker push kubeshop/testkube-playwright-executor:${{ steps.github_sha.outputs.sha_short }}
#
#  workflow_dispatch:
#    needs: [api, single_executor, executor_jmeter, executor_jmeterd, jmeterd_slave, executor_maven, executor_gradle, executor_cypress, executor_playwright]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Get commit sha
#        id: github_sha
#        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
#
#      - name: Repository Dispatch
#        uses: peter-evans/repository-dispatch@v2
#        with:
#          token: ${{ secrets.CI_BOT_TOKEN }}
#          repository: kubeshop/helm-charts
#          event-type: trigger-workflow-api-develop
#          client-payload: '{"image_tag_api": "${{ steps.github_sha.outputs.sha_short }}"}'
#
