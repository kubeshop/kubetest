// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/executor/client (interfaces: Executor)

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	output "github.com/kubeshop/testkube/pkg/executor/output"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockExecutor) Abort(arg0 *testkube.Execution) *testkube.ExecutionResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0.Id)
	ret0, _ := ret[0].(*testkube.ExecutionResult)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockExecutorMockRecorder) Abort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockExecutor)(nil).Abort), arg0)
}

// Execute mocks base method.
func (m *MockExecutor) Execute(arg0 *testkube.Execution, arg1 ExecuteOptions) (testkube.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(testkube.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), arg0, arg1)
}

// ExecuteSync mocks base method.
func (m *MockExecutor) ExecuteSync(arg0 *testkube.Execution, arg1 ExecuteOptions) (testkube.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSync", arg0, arg1)
	ret0, _ := ret[0].(testkube.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSync indicates an expected call of ExecuteSync.
func (mr *MockExecutorMockRecorder) ExecuteSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSync", reflect.TypeOf((*MockExecutor)(nil).ExecuteSync), arg0, arg1)
}

// Logs mocks base method.
func (m *MockExecutor) Logs(arg0 string) (chan output.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0)
	ret0, _ := ret[0].(chan output.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockExecutorMockRecorder) Logs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockExecutor)(nil).Logs), arg0)
}
