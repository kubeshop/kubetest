// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/tcl/testworkflowstcl/testworkflowexecutor (interfaces: TestWorkflowExecutor)

// Package testworkflowexecutor is a generated GoMock package.
package testworkflowexecutor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	testworkflowprocessor "github.com/kubeshop/testkube/pkg/tcl/testworkflowstcl/testworkflowprocessor"
)

// MockTestWorkflowExecutor is a mock of TestWorkflowExecutor interface.
type MockTestWorkflowExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTestWorkflowExecutorMockRecorder
}

// MockTestWorkflowExecutorMockRecorder is the mock recorder for MockTestWorkflowExecutor.
type MockTestWorkflowExecutorMockRecorder struct {
	mock *MockTestWorkflowExecutor
}

// NewMockTestWorkflowExecutor creates a new mock instance.
func NewMockTestWorkflowExecutor(ctrl *gomock.Controller) *MockTestWorkflowExecutor {
	mock := &MockTestWorkflowExecutor{ctrl: ctrl}
	mock.recorder = &MockTestWorkflowExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWorkflowExecutor) EXPECT() *MockTestWorkflowExecutorMockRecorder {
	return m.recorder
}

// Control mocks base method.
func (m *MockTestWorkflowExecutor) Control(arg0 context.Context, arg1 testkube.TestWorkflowExecution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Control", arg0, arg1)
}

// Control indicates an expected call of Control.
func (mr *MockTestWorkflowExecutorMockRecorder) Control(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Control), arg0, arg1)
}

// Recover mocks base method.
func (m *MockTestWorkflowExecutor) Recover(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recover", arg0)
}

// Recover indicates an expected call of Recover.
func (mr *MockTestWorkflowExecutorMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Recover), arg0)
}

// Schedule mocks base method.
func (m *MockTestWorkflowExecutor) Schedule(arg0 *testworkflowprocessor.Bundle, arg1 testkube.TestWorkflowExecution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Schedule", arg0, arg1)
}

// Schedule indicates an expected call of Schedule.
func (mr *MockTestWorkflowExecutorMockRecorder) Schedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Schedule), arg0, arg1)
}
