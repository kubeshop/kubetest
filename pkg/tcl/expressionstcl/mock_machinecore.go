// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/tcl/expressionstcl (interfaces: MachineCore)

// Package expressionstcl is a generated GoMock package.
package expressionstcl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMachineCore is a mock of MachineCore interface.
type MockMachineCore struct {
	ctrl     *gomock.Controller
	recorder *MockMachineCoreMockRecorder
}

// MockMachineCoreMockRecorder is the mock recorder for MockMachineCore.
type MockMachineCoreMockRecorder struct {
	mock *MockMachineCore
}

// NewMockMachineCore creates a new mock instance.
func NewMockMachineCore(ctrl *gomock.Controller) *MockMachineCore {
	mock := &MockMachineCore{ctrl: ctrl}
	mock.recorder = &MockMachineCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineCore) EXPECT() *MockMachineCoreMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockMachineCore) Call(arg0 string, arg1 ...StaticValue) (Expression, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(Expression)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call.
func (mr *MockMachineCoreMockRecorder) Call(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockMachineCore)(nil).Call), varargs...)
}

// Get mocks base method.
func (m *MockMachineCore) Get(arg0 string) (Expression, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(Expression)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockMachineCoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMachineCore)(nil).Get), arg0)
}
