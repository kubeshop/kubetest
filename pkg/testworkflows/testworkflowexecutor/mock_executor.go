// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/testworkflowexecutor (interfaces: TestWorkflowExecutor)

// Package testworkflowexecutor is a generated GoMock package.
package testworkflowexecutor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/kubeshop/testkube-operator/api/testworkflows/v1"
	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
)

// MockTestWorkflowExecutor is a mock of TestWorkflowExecutor interface.
type MockTestWorkflowExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTestWorkflowExecutorMockRecorder
}

// MockTestWorkflowExecutorMockRecorder is the mock recorder for MockTestWorkflowExecutor.
type MockTestWorkflowExecutorMockRecorder struct {
	mock *MockTestWorkflowExecutor
}

// NewMockTestWorkflowExecutor creates a new mock instance.
func NewMockTestWorkflowExecutor(ctrl *gomock.Controller) *MockTestWorkflowExecutor {
	mock := &MockTestWorkflowExecutor{ctrl: ctrl}
	mock.recorder = &MockTestWorkflowExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWorkflowExecutor) EXPECT() *MockTestWorkflowExecutorMockRecorder {
	return m.recorder
}

// Control mocks base method.
func (m *MockTestWorkflowExecutor) Control(arg0 context.Context, arg1 *v1.TestWorkflow, arg2 *testkube.TestWorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Control", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Control indicates an expected call of Control.
func (mr *MockTestWorkflowExecutorMockRecorder) Control(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Control), arg0, arg1, arg2)
}

// Execute mocks base method.
func (m *MockTestWorkflowExecutor) Execute(arg0 context.Context, arg1 v1.TestWorkflow, arg2 testkube.TestWorkflowExecutionRequest) (testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTestWorkflowExecutorMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Execute), arg0, arg1, arg2)
}

// Recover mocks base method.
func (m *MockTestWorkflowExecutor) Recover(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recover", arg0)
}

// Recover indicates an expected call of Recover.
func (mr *MockTestWorkflowExecutorMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockTestWorkflowExecutor)(nil).Recover), arg0)
}
