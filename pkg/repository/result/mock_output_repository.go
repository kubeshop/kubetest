// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/result (interfaces: OutputRepository)

// Package result is a generated GoMock package.
package result

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOutputRepository is a mock of OutputRepository interface.
type MockOutputRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutputRepositoryMockRecorder
}

// MockOutputRepositoryMockRecorder is the mock recorder for MockOutputRepository.
type MockOutputRepositoryMockRecorder struct {
	mock *MockOutputRepository
}

// NewMockOutputRepository creates a new mock instance.
func NewMockOutputRepository(ctrl *gomock.Controller) *MockOutputRepository {
	mock := &MockOutputRepository{ctrl: ctrl}
	mock.recorder = &MockOutputRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputRepository) EXPECT() *MockOutputRepositoryMockRecorder {
	return m.recorder
}

// DeleteAllOutput mocks base method.
func (m *MockOutputRepository) DeleteAllOutput(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllOutput", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOutput indicates an expected call of DeleteAllOutput.
func (mr *MockOutputRepositoryMockRecorder) DeleteAllOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOutput", reflect.TypeOf((*MockOutputRepository)(nil).DeleteAllOutput), arg0)
}

// DeleteOutput mocks base method.
func (m *MockOutputRepository) DeleteOutput(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutput indicates an expected call of DeleteOutput.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutput", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutput), arg0, arg1, arg2, arg3)
}

// DeleteOutputByTest mocks base method.
func (m *MockOutputRepository) DeleteOutputByTest(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputByTest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputByTest indicates an expected call of DeleteOutputByTest.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputByTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputByTest", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputByTest), arg0, arg1)
}

// DeleteOutputByTestSuite mocks base method.
func (m *MockOutputRepository) DeleteOutputByTestSuite(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputByTestSuite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputByTestSuite indicates an expected call of DeleteOutputByTestSuite.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputByTestSuite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputByTestSuite", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputByTestSuite), arg0, arg1)
}

// DeleteOutputForAllTestSuite mocks base method.
func (m *MockOutputRepository) DeleteOutputForAllTestSuite(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForAllTestSuite", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForAllTestSuite indicates an expected call of DeleteOutputForAllTestSuite.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForAllTestSuite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForAllTestSuite", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForAllTestSuite), arg0)
}

// DeleteOutputForTestSuites mocks base method.
func (m *MockOutputRepository) DeleteOutputForTestSuites(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForTestSuites", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForTestSuites indicates an expected call of DeleteOutputForTestSuites.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForTestSuites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForTestSuites", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForTestSuites), arg0, arg1)
}

// DeleteOutputForTests mocks base method.
func (m *MockOutputRepository) DeleteOutputForTests(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForTests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForTests indicates an expected call of DeleteOutputForTests.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForTests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForTests", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForTests), arg0, arg1)
}

// GetOutput mocks base method.
func (m *MockOutputRepository) GetOutput(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockOutputRepositoryMockRecorder) GetOutput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockOutputRepository)(nil).GetOutput), arg0, arg1, arg2, arg3)
}

// GetOutputSize mocks base method.
func (m *MockOutputRepository) GetOutputSize(arg0 context.Context, arg1, arg2, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputSize", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputSize indicates an expected call of GetOutputSize.
func (mr *MockOutputRepositoryMockRecorder) GetOutputSize(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputSize", reflect.TypeOf((*MockOutputRepository)(nil).GetOutputSize), arg0, arg1, arg2, arg3)
}

// InsertOutput mocks base method.
func (m *MockOutputRepository) InsertOutput(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOutput", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOutput indicates an expected call of InsertOutput.
func (mr *MockOutputRepositoryMockRecorder) InsertOutput(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOutput", reflect.TypeOf((*MockOutputRepository)(nil).InsertOutput), arg0, arg1, arg2, arg3, arg4)
}

// StreamOutput mocks base method.
func (m *MockOutputRepository) StreamOutput(arg0 context.Context, arg1, arg2, arg3 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamOutput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamOutput indicates an expected call of StreamOutput.
func (mr *MockOutputRepositoryMockRecorder) StreamOutput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamOutput", reflect.TypeOf((*MockOutputRepository)(nil).StreamOutput), arg0, arg1, arg2, arg3)
}

// UpdateOutput mocks base method.
func (m *MockOutputRepository) UpdateOutput(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutput", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutput indicates an expected call of UpdateOutput.
func (mr *MockOutputRepositoryMockRecorder) UpdateOutput(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutput", reflect.TypeOf((*MockOutputRepository)(nil).UpdateOutput), arg0, arg1, arg2, arg3, arg4)
}
