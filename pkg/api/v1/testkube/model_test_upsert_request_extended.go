/*
 * TestKube API
 *
 * TestKube provides a Kubernetes-native framework for test definition, execution and results
 *
 * API version: 1.0.0
 * Contact: testkube@kubeshop.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package testkube

import (
	"encoding/json"
	"fmt"
)

// TODO - logic is the same as for Test - we need to abstract it someday
// don't have idea how to do this well for now.
type baseTestUpsertRequest struct {
	Name string `json:"name"`
	// object kubernetes namespace
	Namespace   string `json:"namespace"`
	Description string `json:"description,omitempty"`
	// Run this step before whole suite
	Before []map[string]interface{} `json:"before,omitempty"`
	// Steps to run
	Steps []map[string]interface{} `json:"steps"`
	// Run this step after whole suite
	After   []map[string]interface{} `json:"after,omitempty"`
	Repeats int32                    `json:"repeats,omitempty"`
}

// TODO try move this logic to `[]TestStep` should be common without repeat
func (test *TestUpsertRequest) UnmarshalJSON(data []byte) error {

	fmt.Printf("RAW: %+v\n", string(data))
	var t baseTestUpsertRequest
	err := json.Unmarshal(data, &t)
	if err != nil {
		fmt.Printf("UnmarshalJSON erorr: %+v\n", err)
		return err
	}

	test.Name = t.Name
	test.Namespace = t.Namespace
	test.Description = t.Description
	test.Repeats = t.Repeats

	for _, step := range t.Steps {
		if s := TestStepBase(step).GetTestStep(); s != nil {
			test.Steps = append(test.Steps, s)
		}
	}

	return nil
}
