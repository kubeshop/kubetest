// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/controlplaneclient (interfaces: Client)

// Package controlplaneclient is a generated GoMock package.
package controlplaneclient

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	cloud "github.com/kubeshop/testkube/pkg/cloud"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AppendExecutionReport mocks base method.
func (m *MockClient) AppendExecutionReport(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendExecutionReport", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendExecutionReport indicates an expected call of AppendExecutionReport.
func (mr *MockClientMockRecorder) AppendExecutionReport(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendExecutionReport", reflect.TypeOf((*MockClient)(nil).AppendExecutionReport), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// FinishExecutionResult mocks base method.
func (m *MockClient) FinishExecutionResult(arg0 context.Context, arg1, arg2 string, arg3 *testkube.TestWorkflowResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishExecutionResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishExecutionResult indicates an expected call of FinishExecutionResult.
func (mr *MockClientMockRecorder) FinishExecutionResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishExecutionResult", reflect.TypeOf((*MockClient)(nil).FinishExecutionResult), arg0, arg1, arg2, arg3)
}

// GetCredential mocks base method.
func (m *MockClient) GetCredential(arg0 context.Context, arg1, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockClientMockRecorder) GetCredential(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockClient)(nil).GetCredential), arg0, arg1, arg2, arg3)
}

// GetExecution mocks base method.
func (m *MockClient) GetExecution(arg0 context.Context, arg1, arg2 string) (*testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution.
func (mr *MockClientMockRecorder) GetExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockClient)(nil).GetExecution), arg0, arg1, arg2)
}

// GetRunnerOngoingExecutions mocks base method.
func (m *MockClient) GetRunnerOngoingExecutions(arg0 context.Context) ([]*cloud.UnfinishedExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerOngoingExecutions", arg0)
	ret0, _ := ret[0].([]*cloud.UnfinishedExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunnerOngoingExecutions indicates an expected call of GetRunnerOngoingExecutions.
func (mr *MockClientMockRecorder) GetRunnerOngoingExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerOngoingExecutions", reflect.TypeOf((*MockClient)(nil).GetRunnerOngoingExecutions), arg0)
}

// InitExecution mocks base method.
func (m *MockClient) InitExecution(arg0 context.Context, arg1, arg2 string, arg3 []testkube.TestWorkflowSignature, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitExecution", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitExecution indicates an expected call of InitExecution.
func (mr *MockClientMockRecorder) InitExecution(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitExecution", reflect.TypeOf((*MockClient)(nil).InitExecution), arg0, arg1, arg2, arg3, arg4)
}

// IsLegacy mocks base method.
func (m *MockClient) IsLegacy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLegacy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLegacy indicates an expected call of IsLegacy.
func (mr *MockClientMockRecorder) IsLegacy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLegacy", reflect.TypeOf((*MockClient)(nil).IsLegacy))
}

// IsRunner mocks base method.
func (m *MockClient) IsRunner() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunner")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunner indicates an expected call of IsRunner.
func (mr *MockClientMockRecorder) IsRunner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunner", reflect.TypeOf((*MockClient)(nil).IsRunner))
}

// IsSuperAgent mocks base method.
func (m *MockClient) IsSuperAgent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperAgent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuperAgent indicates an expected call of IsSuperAgent.
func (mr *MockClientMockRecorder) IsSuperAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperAgent", reflect.TypeOf((*MockClient)(nil).IsSuperAgent))
}

// ObtainExecution mocks base method.
func (m *MockClient) ObtainExecution(arg0 context.Context, arg1, arg2 string) (*cloud.ObtainExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cloud.ObtainExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainExecution indicates an expected call of ObtainExecution.
func (mr *MockClientMockRecorder) ObtainExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainExecution", reflect.TypeOf((*MockClient)(nil).ObtainExecution), arg0, arg1, arg2)
}

// ProcessExecutionNotificationRequests mocks base method.
func (m *MockClient) ProcessExecutionNotificationRequests(arg0 context.Context, arg1 func(context.Context, *cloud.TestWorkflowNotificationsRequest) NotificationWatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessExecutionNotificationRequests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExecutionNotificationRequests indicates an expected call of ProcessExecutionNotificationRequests.
func (mr *MockClientMockRecorder) ProcessExecutionNotificationRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExecutionNotificationRequests", reflect.TypeOf((*MockClient)(nil).ProcessExecutionNotificationRequests), arg0, arg1)
}

// ProcessExecutionParallelWorkerNotificationRequests mocks base method.
func (m *MockClient) ProcessExecutionParallelWorkerNotificationRequests(arg0 context.Context, arg1 func(context.Context, *cloud.TestWorkflowParallelStepNotificationsRequest) NotificationWatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessExecutionParallelWorkerNotificationRequests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExecutionParallelWorkerNotificationRequests indicates an expected call of ProcessExecutionParallelWorkerNotificationRequests.
func (mr *MockClientMockRecorder) ProcessExecutionParallelWorkerNotificationRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExecutionParallelWorkerNotificationRequests", reflect.TypeOf((*MockClient)(nil).ProcessExecutionParallelWorkerNotificationRequests), arg0, arg1)
}

// ProcessExecutionServiceNotificationRequests mocks base method.
func (m *MockClient) ProcessExecutionServiceNotificationRequests(arg0 context.Context, arg1 func(context.Context, *cloud.TestWorkflowServiceNotificationsRequest) NotificationWatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessExecutionServiceNotificationRequests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExecutionServiceNotificationRequests indicates an expected call of ProcessExecutionServiceNotificationRequests.
func (mr *MockClientMockRecorder) ProcessExecutionServiceNotificationRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExecutionServiceNotificationRequests", reflect.TypeOf((*MockClient)(nil).ProcessExecutionServiceNotificationRequests), arg0, arg1)
}

// SaveExecutionArtifactGetPresignedURL mocks base method.
func (m *MockClient) SaveExecutionArtifactGetPresignedURL(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExecutionArtifactGetPresignedURL", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveExecutionArtifactGetPresignedURL indicates an expected call of SaveExecutionArtifactGetPresignedURL.
func (mr *MockClientMockRecorder) SaveExecutionArtifactGetPresignedURL(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExecutionArtifactGetPresignedURL", reflect.TypeOf((*MockClient)(nil).SaveExecutionArtifactGetPresignedURL), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SaveExecutionLogs mocks base method.
func (m *MockClient) SaveExecutionLogs(arg0 context.Context, arg1, arg2, arg3 string, arg4 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExecutionLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExecutionLogs indicates an expected call of SaveExecutionLogs.
func (mr *MockClientMockRecorder) SaveExecutionLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExecutionLogs", reflect.TypeOf((*MockClient)(nil).SaveExecutionLogs), arg0, arg1, arg2, arg3, arg4)
}

// SaveExecutionLogsGetPresignedURL mocks base method.
func (m *MockClient) SaveExecutionLogsGetPresignedURL(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExecutionLogsGetPresignedURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveExecutionLogsGetPresignedURL indicates an expected call of SaveExecutionLogsGetPresignedURL.
func (mr *MockClientMockRecorder) SaveExecutionLogsGetPresignedURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExecutionLogsGetPresignedURL", reflect.TypeOf((*MockClient)(nil).SaveExecutionLogsGetPresignedURL), arg0, arg1, arg2, arg3)
}

// ScheduleExecution mocks base method.
func (m *MockClient) ScheduleExecution(arg0 context.Context, arg1 string, arg2 *cloud.ScheduleRequest) ([]testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleExecution indicates an expected call of ScheduleExecution.
func (mr *MockClientMockRecorder) ScheduleExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleExecution", reflect.TypeOf((*MockClient)(nil).ScheduleExecution), arg0, arg1, arg2)
}

// UpdateExecutionOutput mocks base method.
func (m *MockClient) UpdateExecutionOutput(arg0 context.Context, arg1, arg2 string, arg3 []testkube.TestWorkflowOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutionOutput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExecutionOutput indicates an expected call of UpdateExecutionOutput.
func (mr *MockClientMockRecorder) UpdateExecutionOutput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutionOutput", reflect.TypeOf((*MockClient)(nil).UpdateExecutionOutput), arg0, arg1, arg2, arg3)
}

// UpdateExecutionResult mocks base method.
func (m *MockClient) UpdateExecutionResult(arg0 context.Context, arg1, arg2 string, arg3 *testkube.TestWorkflowResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutionResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExecutionResult indicates an expected call of UpdateExecutionResult.
func (mr *MockClientMockRecorder) UpdateExecutionResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutionResult", reflect.TypeOf((*MockClient)(nil).UpdateExecutionResult), arg0, arg1, arg2, arg3)
}

// WatchRunnerRequests mocks base method.
func (m *MockClient) WatchRunnerRequests(arg0 context.Context) RunnerRequestsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRunnerRequests", arg0)
	ret0, _ := ret[0].(RunnerRequestsWatcher)
	return ret0
}

// WatchRunnerRequests indicates an expected call of WatchRunnerRequests.
func (mr *MockClientMockRecorder) WatchRunnerRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRunnerRequests", reflect.TypeOf((*MockClient)(nil).WatchRunnerRequests), arg0)
}
