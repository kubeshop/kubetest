---
apiVersion: gateway.kusk.io/v1alpha1
kind: API
metadata:
  name: testkube
  namespace: default
spec:
  spec: |
    components:
      parameters:
        ExecutionsEndDateFilter:
          description: endDate for filtering
          in: query
          name: endDate
          schema:
            format: date
            type: string
        ExecutionsPageIndex:
          description: the page index to start at
          in: query
          name: page
          schema:
            default: 0
            type: integer
        ExecutionsPageSize:
          description: the number of executions to get, setting to 0 will return only
            totals
          in: query
          name: pageSize
          schema:
            default: 100
            type: integer
        ExecutionsStartDateFilter:
          description: startDate for filtering in ISO-8601 format, i.e. "yyyy-mm-dd"
          in: query
          name: startDate
          schema:
            format: date
            type: string
        ExecutionsStatusFilter:
          description: optional status filter
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/ExecutionStatus'
      schemas:
        Artifact:
          description: API server artifact
          properties:
            name:
              description: artifact file path
              type: string
            size:
              description: file size in bytes
              type: integer
          type: object
        AssertionResult:
          description: execution result data
          properties:
            errorMessage:
              nullable: true
              type: string
            name:
              type: string
            status:
              enum:
              - success
              - error
              type: string
          type: object
        Execution:
          description: API server script execution
          properties:
            args:
              additionalProperties:
                type: string
              description: additional arguments/flags passed to executor binary
              example:
              - --concurrency
              - "2"
              - --remote
              - --some
              - blabla
              items:
                type: string
              type: array
            endTime:
              description: test end time
              format: date-time
              type: string
            envs:
              additionalProperties:
                type: string
              description: environment variables passed to executor
              example:
                prefix: some-
                record: "true"
              type: object
            executionResult:
              $ref: '#/components/schemas/ExecutionResult'
            id:
              description: execution id
              format: bson objectId
              type: string
            name:
              description: execution name
              type: string
            params:
              additionalProperties:
                type: string
              description: execution params passed to executor converted to vars for usage
                in tests
              example:
                prefix: some-
                users: "3"
              type: object
            repository:
              $ref: '#/components/schemas/Repository'
            scriptContent:
              description: script metadata content
              type: string
            scriptName:
              description: unique script name (CRD Script name)
              type: string
            scriptType:
              description: script type e.g. postman/collection
              type: string
            startTime:
              description: test start time
              format: date-time
              type: string
          type: object
        ExecutionRequest:
          description: scripts execution request body
          properties:
            name:
              description: script execution custom name
              example: testing with 1000 users
              type: string
            namespace:
              description: script kubernetes namespace ("testkube" when not set)
              example: testkube
              type: string
            params:
              additionalProperties:
                type: string
              description: execution params passed to executor
              example:
                prefix: some-
                users: "3"
              type: object
          type: object
        ExecutionResult:
          description: execution result returned from executor
          properties:
            errorMessage:
              description: error message when status is error, separate to output as output
                can be partial in case of error
              type: string
            output:
              description: RAW Script execution output, depends of reporter used in particular
                tool
              type: string
            outputType:
              description: output type depends of reporter used in partucular tool
              enum:
              - text/plain
              - application/junit+xml
              - application/json
              type: string
            status:
              $ref: '#/components/schemas/ExecutionStatus'
            steps:
              description: execution steps (for collection of requests)
              items:
                $ref: '#/components/schemas/ExecutionStepResult'
              type: array
          required:
          - status
          type: object
        ExecutionStatus:
          enum:
          - queued
          - pending
          - success
          - error
          type: string
        ExecutionStepResult:
          description: execution result data
          properties:
            assertionResults:
              items:
                $ref: '#/components/schemas/AssertionResult'
              type: array
            duration:
              format: duration
              type: string
            name:
              description: step name
              type: string
            status:
              description: execution step status
              enum:
              - success
              - error
              type: string
          required:
          - name
          - status
          type: object
        ExecutionSummary:
          description: execution summary
          properties:
            endTime:
              description: test execution end time
              format: date-time
              type: string
            id:
              description: execution id
              format: bson objectId
              type: string
            name:
              description: execution name
              type: string
            scriptName:
              description: name of the script
              type: string
            scriptType:
              description: the type of script for this execution
              type: string
            startTime:
              description: test execution start time
              format: date-time
              type: string
            status:
              $ref: '#/components/schemas/ExecutionStatus'
          required:
          - id
          - name
          - scriptName
          - scriptType
          - status
          type: object
        ExecutionsResult:
          description: the result for a page of executions
          properties:
            filtered:
              $ref: '#/components/schemas/ExecutionsTotals'
            results:
              items:
                $ref: '#/components/schemas/ExecutionSummary'
              type: array
            totals:
              $ref: '#/components/schemas/ExecutionsTotals'
          required:
          - totals
          - results
          type: object
        ExecutionsTotals:
          description: various execution counters
          properties:
            failed:
              description: the total number of failed executions available
              type: integer
            passed:
              description: the total number of passed executions available
              type: integer
            pending:
              description: the total number of running executions available
              type: integer
            queued:
              description: the total number of queued executions available
              type: integer
            results:
              description: the total number of executions available
              type: integer
          required:
          - results
          - passed
          - failed
          - queued
          - pending
          type: object
        Executor:
          description: CRD based executor data
          properties:
            executorType:
              description: ExecutorType one of "rest" for rest openapi based executors
                or "job" which will be default runners for testkube soon
              type: string
            image:
              description: Image for kube-job
              type: string
            types:
              description: Types defines what types can be handled by executor e.g. "postman/collection",
                ":curl/command" etc
              items:
                type: string
              type: array
            uri:
              description: URI for rest based executors
              type: string
            volumeMountPath:
              description: VolumeMountPath - where should PV be monted inside job pod
                for e.g. artifacts
              type: string
            volumeQuantity:
              description: VolumeQuantity for kube-job PersistentVolume
              type: string
          type: object
        ExecutorCreateRequest:
          allOf:
          - $ref: '#/components/schemas/Executor'
          - properties:
              name:
                description: executor name
                example: kubeshop-homepage-test
                type: string
              namespace:
                description: Kubernetes namespace
                example: testkube
                type: string
            required:
            - rootCause
            type: object
          description: executor create request body
          required:
          - name
          - namespace
          - types
          type: object
        ExecutorDetails:
          description: Executor details with Executor data and additional information
            like list of executions
          properties:
            executions:
              $ref: '#/components/schemas/ExecutionsResult'
            executor:
              $ref: '#/components/schemas/Executor'
            name:
              description: Executor name
              type: string
          type: object
        ExecutorOutput:
          description: CRD based executor data
          properties:
            content:
              description: Message/event data passed from executor (like log lines etc)
              type: string
            result:
              $ref: '#/components/schemas/ExecutionResult'
            type:
              description: One of possible output types
              enum:
              - error
              - log
              - event
              - result
              type: string
          required:
          - type
          type: object
        ExecutorStartRequest:
          description: scripts execution request body when calling new execution request
          properties:
            content:
              description: script content as string (content depends from executor)
              type: string
            id:
              description: ID of script execution to handle by executor, execution need
                to be able to return execution info based on this ID
              example: af7f8afa8bc8ab8ab8a83b8
              type: string
            inputType:
              description: |
                script content type can be:  - direct content - created from file, - git repository with path, will be checked out, useful when test have more than one file or complicated directory structure,
              enum:
              - content
              - git
              type: string
            name:
              description: script execution custom name
              example: testing with 1000 users
              type: string
            params:
              additionalProperties:
                type: string
              description: execution params passed to executor
              example:
                prefix: some-
                users: "3"
              type: object
            repository:
              $ref: '#/components/schemas/Repository'
            type:
              description: script type
              example: postaman/collection
              type: string
          type: object
        Problem:
          description: problem response in case of error
          properties:
            detail:
              description: A human-readable explanation specific to this occurrence of
                the problem.
              example: Your script name can't contain forbidden characters like "}}}"
                passed
              type: string
            instance:
              description: A URI that identifies the specific occurrence of the problem.
                This URI may or may not yield further information if de-referenced.
              example: http://10.23.23.123:8088/scripts
              type: string
            status:
              description: HTTP status code for this occurrence of the problem.
              example: 500
              type: integer
            title:
              description: Title is a short, human-readable summary of the problem type.
                This title SHOULD NOT change from occurrence to occurrence of the problem,
                except forpurposes of localization.
              example: Invalid script name
              type: string
            type:
              description: Type contains a URI that identifies the problem type. This
                URI will,
              example: http://kubeshop.io/testkube/problems/invalidscriptname
              type: string
          type: object
        Repository:
          description: repository representation for tests in git repositories
          properties:
            branch:
              description: branch/tag name for checkout
              type: string
            path:
              description: if needed we can checkout particular path (dir or file) in
                case of BIG/mono repositories
              type: string
            type:
              description: VCS repository type
              enum:
              - git
              type: string
            uri:
              description: uri of content file or git directory
              type: string
          required:
          - type
          - uri
          - branch
          type: object
        Script:
          properties:
            content:
              description: script content
              type: string
            created:
              format: date-time
              type: string
            name:
              description: script name
              type: string
            type:
              description: script type
              enum:
              - postman/collection
              type: string
          type: object
        ScriptCreateRequest:
          description: scripts create request body
          properties:
            content:
              description: script content - executor specific e.g. fo postman-collections
                executor
              example: |
                {
                  "info": {
                    "_postman_id": "57ad6291-5b8f-4b2d-b24d-d2d2ce8785bb",
                    "name": "SimpleKubeshop",
                    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
                  },
                  "item": [
                    {
                      "name": "Homepage",
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": null
                      },
                      "response": []
                    }
              type: string
            inputType:
              description: |
                script content type can be:  - direct content - created from file,  - git repo directory checkout in case when test is some kind of project or have more than one file,
              enum:
              - content
              - git
              type: string
            name:
              description: script name - Custom Resource name - must be unique, use only
                lowercase numbers and dashes (-)
              example: kubeshop-homepage-test
              type: string
            namespace:
              description: kubernetes namespace (defaults to 'testkube')
              example: testkube
              type: string
            repository:
              $ref: '#/components/schemas/Repository'
            type:
              description: script type - what executor type should be used during test
                execution
              example: postman/collection
              type: string
          type: object
        ServerInfo:
          description: Server information with build version, build commit etc.
          properties:
            commit:
              description: build commit
              type: string
            version:
              description: build version
              type: string
          required:
          - version
          type: object
    externalDocs:
      description: Find out more about testkube
      url: http://testkube.io
    info:
      contact:
        email: testkube@kubeshop.io
      description: TestKube provides a Kubernetes-native framework for test definition,
        execution and results
      license:
        name: MIT
        url: https://opensource.org/licenses/MIT
      title: TestKube API
      version: 1.0.0
    openapi: 3.0.1
    paths:
      /executions:
        get:
          description: Returns array of scripts executions
          operationId: listExecutions
          parameters:
          - $ref: '#/components/parameters/ExecutionsPageSize'
          - $ref: '#/components/parameters/ExecutionsPageIndex'
          - $ref: '#/components/parameters/ExecutionsStatusFilter'
          - $ref: '#/components/parameters/ExecutionsStartDateFilter'
          - $ref: '#/components/parameters/ExecutionsEndDateFilter'
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ExecutionsResult'
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting script executions from storage
          summary: Get all script executions
          tags:
          - executions
          - api
      /executions/:
        get:
          description: Returns array of scripts executions
          operationId: listExecutionsA
          parameters:
          - $ref: '#/components/parameters/ExecutionsPageSize'
          - $ref: '#/components/parameters/ExecutionsPageIndex'
          - $ref: '#/components/parameters/ExecutionsStatusFilter'
          - $ref: '#/components/parameters/ExecutionsStartDateFilter'
          - $ref: '#/components/parameters/ExecutionsEndDateFilter'
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ExecutionsResult'
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting script executions from storage
          summary: Get all script executions
          tags:
          - executions
          - api
      /executions/{executionID}:
        get:
          description: Returns execution with given executionID
          operationId: getExecutionByID
          parameters:
          - description: ID of the script execution
            in: path
            name: executionID
            required: true
            schema:
              type: string
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Execution'
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting script executions from storage
          summary: Get script execution by ID
          tags:
          - executions
          - api
      /executions/{id}/artifacts:
        get:
          description: Returns artifacts of the given executionID
          operationId: getExecutionArtifacts
          parameters:
          - description: ID of the script execution
            in: path
            name: id
            required: true
            schema:
              type: string
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Artifact'
                    type: array
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting execution's artifacts from storage
          summary: Get execution's artifacts by ID
          tags:
          - artifacts
          - executions
          - api
      /executions/{id}/artifacts/{filename}:
        get:
          operationId: downloadFile
          parameters:
          - description: ID of the script execution
            in: path
            name: id
            required: true
            schema:
              type: string
          - description: name of the file in the bucket
            in: path
            name: filename
            required: true
            schema:
              type: string
          responses:
            "200":
              content:
                application/octet-stream:
                  schema:
                    format: binary
                    type: string
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting artifacts from storage
      /executors:
        get:
          description: List executors available in cluster
          operationId: listExecutors
          parameters:
          - description: kubernetes namespace
            in: query
            name: namespace
            schema:
              type: integer
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Executor'
                    type: array
              description: successful operation
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with read information from kubernetes cluster
          summary: List executors
          tags:
          - executor
          - api
        post:
          description: create new executor based on params passed in request
          operationId: createExecutor
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExecutorCreateRequest'
            description: executor request body data
            required: true
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/ExecutorDetails'
                    type: array
              description: successful operation
            "400":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with executor definition - probably some bad input
                occurs (invalid JSON body or similar)
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with communicating with kubernetes cluster
          summary: create new executor
          tags:
          - scripts
          - api
      /executors/{name}:
        delete:
          description: Deletes executor by its name
          operationId: deleteExecutor
          parameters:
          - description: Executor CRD name
            in: path
            name: name
            required: true
            schema:
              type: string
          - description: CRD namespace
            in: query
            name: namespace
            required: true
            schema:
              type: string
          responses:
            "204":
              description: executor deleted successfuly
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with communicating with kubernetes cluster
          summary: Delete executor
          tags:
          - api
          - executor
        get:
          description: Returns executors data with executions passed to executor
          operationId: getExecutor
          parameters:
          - description: Executor CRD name
            in: path
            name: name
            required: true
            schema:
              type: string
          - description: kubernetes namespace
            in: query
            name: namespace
            schema:
              type: integer
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/ExecutorDetails'
                    type: object
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting executor data
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with communicating with kubernetes cluster
          summary: Get executor details
          tags:
          - api
          - executor
      /scripts:
        delete:
          description: deletes all the scripts
          operationId: deleteScripts
          responses:
            "204":
              description: no content
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with read information from kubernetes cluster
          summary: delete scripts
          tags:
          - scripts
          - api
        get:
          description: filters will be added later
          operationId: listScripts
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Script'
                    type: array
              description: successful operation
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with read information from kubernetes cluster
          summary: List scripts
          tags:
          - scripts
          - api
        post:
          description: create new script based on script content or git based data
          operationId: createScript
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ScriptCreateRequest'
            description: script details body
            required: true
          responses:
            "200":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Script'
                    type: array
              description: successful operation
            "400":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with script definition - probably some bad input occurs
                (invalid JSON body or similar)
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with communicating with kubernetes cluster
          summary: create new script
          tags:
          - scripts
          - api
      /scripts/{id}:
        delete:
          description: deletes a script
          operationId: deleteScript
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          responses:
            "204":
              description: no content
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with read information from kubernetes cluster
          summary: delete script
          tags:
          - scripts
          - api
        get:
          description: Gets the specified script
          operationId: getScript
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Script'
              description: successful operation
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with read information from kubernetes cluster
          summary: Get script
          tags:
          - scripts
          - api
      /scripts/{id}/executions:
        get:
          description: Returns array of all available script executions
          operationId: listExecutions
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          - $ref: '#/components/parameters/ExecutionsPageSize'
          - $ref: '#/components/parameters/ExecutionsPageIndex'
          - $ref: '#/components/parameters/ExecutionsStatusFilter'
          - $ref: '#/components/parameters/ExecutionsStartDateFilter'
          - $ref: '#/components/parameters/ExecutionsEndDateFilter'
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ExecutionsResult'
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting script executions from storage
          summary: Get all script executions
          tags:
          - api
          - scripts
          - executions
        post:
          description: New script execution returns new execution details on successful
            execution start
          operationId: executeScript
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          - description: kubernetes namespace
            in: query
            name: namespace
            schema:
              type: integer
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExecutionRequest'
            description: body passed to configure execution
            required: true
          responses:
            "201":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/ExecutionResult'
                    type: object
              description: successful operation
            "400":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with request body
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with script execution
            "502":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with communicating with kubernetes cluster
          summary: Starts new script execution
          tags:
          - api
          - scripts
          - executions
      /scripts/{id}/executions/{executionID}:
        delete:
          description: Aborts execution and returns execution details
          operationId: abortExecution
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          - description: ID of the script execution
            in: path
            name: executionID
            required: true
            schema:
              type: string
          responses:
            "501":
              content:
                application/json:
                  schema:
                    items:
                      $ref: '#/components/schemas/ExecutionResult'
                    type: object
              description: not implemented yet
          summary: Aborts execution
          tags:
          - api
          - scripts
          - executions
        get:
          description: Returns execution with given executionID
          operationId: getExecution
          parameters:
          - description: ID of the script
            in: path
            name: id
            required: true
            schema:
              type: string
          - description: ID of the script execution
            in: path
            name: executionID
            required: true
            schema:
              type: string
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Execution'
              description: successful operation
            "500":
              content:
                application/problem+json:
                  schema:
                    items:
                      $ref: '#/components/schemas/Problem'
                    type: array
              description: problem with getting script executions from storage
          summary: Get script execution
          tags:
          - api
          - scripts
          - executions
    tags:
    - description: TestKube API operations
      name: api
    - description: Script operations
      name: scripts
    - description: Execution operations
      name: executions
    x-kusk:
      path:
        prefix: /results/v1
        rewrite:
          pattern: "^/results"
          substitution: ""
      upstream:
        service:
          name: testkube-api-server
          namespace: testkube
          port: 8088
      cors:
        origins:
          - "*"
        methods:
          - GET
        headers:
          - Content-Type
        credentials: true
        expose_headers:
          - X-Custom-PathLevel1
          - X-Custom-PathLevel2
        max_age: 86200
