openapi: 3.0.1

info:
  title: Testkube API
  description: "Testkube provides a Kubernetes-native framework for test definition, execution and results"
  contact:
    email: testkube@kubeshop.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

externalDocs:
  description: "Find out more about testkube"
  url: http://testkube.io

tags:
  - name: api
    description: "Testkube API operations"
  - name: tests
    description: "Tests operations"
  - name: executions
    description: "Test suites and tests execution operations"
  - name: test-suites
    description: "Test suites orchestration operations"
  - name: labels
    description: "Listing all available labels"

paths:
  /test-suites:
    post:
      tags:
        - test-suites
        - api
      summary: "Create new test"
      description: "Create new test suite action"
      operationId: createTestSuite
      requestBody:
        $ref: "#/components/schemas/TestSuiteUpsertRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuite"
        500:
          description: "problem with creating test suite"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

    get:
      tags:
        - test-suites
        - api
      summary: "Get all tests"
      description: "Returns array of test suites"
      operationId: listTestSuites
      parameters:
        - $ref: "#/components/parameters/Selector"
        - $ref: "#/components/parameters/TextSearch"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestSuite"
        500:
          description: "problem with getting test suite executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /test-suites/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test suite
      tags:
        - test-suites
        - api
      summary: "Get test suite by ID"
      description: "Returns test suite with given name"
      operationId: getTestSuiteByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        500:
          description: "problem with getting test suite from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /test-suite-executions:
    get:
      tags:
        - executions
        - api
      summary: "Get all test suites executions"
      description: "Returns array of test suites executions"
      operationId: listTestSuiteExecutions
      parameters:
        - $ref: "#/components/parameters/TestName"
        - $ref: "#/components/parameters/TextSearch"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageIndex"
        - $ref: "#/components/parameters/ExecutionsStatusFilter"
        - $ref: "#/components/parameters/StartDateFilter"
        - $ref: "#/components/parameters/EndDateFilter"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuiteExecutionsResult"
        500:
          description: "problem with getting test suite executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /test-suite-executions/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test suite execution
      tags:
        - executions
        - api
      summary: "Get test suite execution by ID"
      description: "Returns test suite execution with given executionID"
      operationId: getTestSuiteExecutionByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuiteExecution"
        500:
          description: "problem with getting test suite executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /executions:
    get:
      tags:
        - executions
        - api
      summary: "Get all test executions"
      description: "Returns array of test executions"
      operationId: listExecutions
      parameters:
        - $ref: "#/components/parameters/TestName"
        - $ref: "#/components/parameters/Type"
        - $ref: "#/components/parameters/TextSearch"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageIndex"
        - $ref: "#/components/parameters/ExecutionsStatusFilter"
        - $ref: "#/components/parameters/StartDateFilter"
        - $ref: "#/components/parameters/EndDateFilter"
        - $ref: "#/components/parameters/Selector"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionsResult"
        500:
          description: "problem with getting test executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /executions/{executionID}:
    get:
      parameters:
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the test execution
      tags:
        - executions
        - api
      summary: "Get test execution by ID"
      description: "Returns execution with given executionID"
      operationId: getExecutionByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        500:
          description: "problem with getting test executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /executions/{id}/artifacts:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test execution
      tags:
        - artifacts
        - executions
        - api
      summary: "Get execution's artifacts by ID"
      description: "Returns artifacts of the given executionID"
      operationId: getExecutionArtifacts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artifact"
        500:
          description: "problem with getting execution's artifacts from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /executions/{id}/artifacts/{filename}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test execution
        - in: path # minio/[bucket_exec_id]/cypress/video/somevideo.avi
          name: filename
          schema:
            type: string
          required: true
          description: name of the file in the bucket
      operationId: downloadFile
      responses:
        200:
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        500:
          description: "problem with getting artifacts from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /tests:
    get:
      tags:
        - tests
        - api
      summary: "List tests"
      description: "List available tests"
      operationId: listTests
      parameters:
        - $ref: "#/components/parameters/Selector"
        - $ref: "#/components/parameters/TextSearch"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
    post:
      tags:
        - tests
        - api
      summary: "create new test"
      description: "create new test based on file content, uri or git based data"
      operationId: createTest
      requestBody:
        description: test details body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestUpsertRequest"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        400:
          description: "problem with test definition - probably some bad input occurs (invalid JSON body or similar)"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - tests
        - api
      summary: "delete test"
      description: "deletes all the tests"
      operationId: deleteTest
      responses:
        204:
          description: "no content"
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /tests/{id}:
    patch:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test execution
      tags:
        - tests
        - api
      summary: "update test"
      description: "update test based on test content or git based data"
      operationId: updateTest
      requestBody:
        description: test details body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestUpsertRequest"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        400:
          description: "problem with test definition - probably some bad input occurs (invalid JSON body or similar)"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

    get:
      tags:
        - tests
        - api
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
      summary: "Get test"
      description: "Gets the specified test"
      operationId: getTest
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - tests
        - api
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
      summary: "delete test"
      description: "deletes a test"
      operationId: deleteTest
      responses:
        204:
          description: "no content"
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /tests/{id}/executions:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
        - in: query
          name: namespace
          schema:
            type: integer
          description: kubernetes namespace
          required: false
        - $ref: "#/components/parameters/Selector"
      tags:
        - api
        - tests
        - executions
      summary: "Starts new test execution"
      description: "New test execution returns new execution details on successful execution start"
      operationId: executeTest
      requestBody:
        description: body passed to configure execution
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionRequest"
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/ExecutionResult"
        400:
          description: "problem with request body"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        500:
          description: "problem with test execution"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageIndex"
        - $ref: "#/components/parameters/ExecutionsStatusFilter"
        - $ref: "#/components/parameters/StartDateFilter"
        - $ref: "#/components/parameters/EndDateFilter"
      tags:
        - api
        - tests
        - executions
      summary: "Get all test executions"
      description: "Returns array of all available test executions"
      operationId: listTestExecutions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionsResult"
        500:
          description: "problem with getting test executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /tests/{id}/executions/{executionID}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the test execution
      tags:
        - api
        - tests
        - executions
      summary: "Get test execution"
      description: "Returns execution with given executionID"
      operationId: getTestExecution
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        500:
          description: "problem with getting test executions from storage"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the test
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the test execution
      tags:
        - api
        - tests
        - executions
      summary: "Aborts execution"
      description: "Aborts execution and returns execution details"
      operationId: abortExecution
      responses:
        501:
          description: not implemented yet
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/ExecutionResult"

  /executors:
    get:
      tags:
        - executor
        - api
      summary: "List executors"
      description: "List executors available in cluster"
      operationId: listExecutors
      parameters:
        - in: query
          name: namespace
          schema:
            type: integer
          description: kubernetes namespace
          required: false
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Executor"
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
    post:
      tags:
        - tests
        - api
      summary: "create new executor"
      description: "create new executor based on params passed in request"
      operationId: createExecutor
      requestBody:
        description: executor request body data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutorCreateRequest"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutorDetails"
        400:
          description: "problem with executor definition - probably some bad input occurs (invalid JSON body or similar)"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /executors/{name}:
    delete:
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Executor CRD name
        - in: query
          name: namespace
          schema:
            type: string
          required: true
          description: CRD namespace
      tags:
        - api
        - executor
      summary: "Delete executor"
      description: "Deletes executor by its name"
      operationId: deleteExecutor
      responses:
        204:
          description: executor deleted successfuly
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

    get:
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Executor CRD name
        - in: query
          name: namespace
          schema:
            type: integer
          description: kubernetes namespace
          required: false
      tags:
        - api
        - executor
      summary: "Get executor details"
      description: "Returns executors data with executions passed to executor"
      operationId: getExecutor
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/ExecutorDetails"
        502:
          description: "problem with communicating with kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
        500:
          description: "problem with getting executor data"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

  /labels:
    get:
      tags:
        - labels
      summary: "List labels"
      description: "list all available labels"
      operationId: listLabels
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
        502:
          description: "problem with read information from kubernetes cluster"
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"

components:
  schemas:
    ObjectRef:
      required:
        - name
      type: object
      properties:
        namespace:
          type: string
          description: object kubernetes namespace
        name:
          type: string
          description: object name

    TestSuite:
      type: object
      required:
        - name
        - status
        - steps
      properties:
        name:
          type: string
        namespace:
          type: string
        description:
          type: string
        before:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteStep"
          description: Run this step before whole suite
        labels:
          type: object
          description: "test suite labels"
          additionalProperties:
            type: string
          example:
            env: "prod"
            app: "backend"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteStep"
          description: Steps to run
        after:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteStep"
          description: Run this step after whole suite
        repeats:
          type: integer
          default: 1

    TestSuiteStepType:
      type: string
      enum:
        - executeTest
        - delay

    TestSuiteStep:
      type: object
      required:
        - name
        - type
        - stopTestOnFailure
      properties:
        stopTestOnFailure:
          type: boolean
          default: true
        execute:
          $ref: "#/components/schemas/TestSuiteStepExecuteTest"
        delay:
          $ref: "#/components/schemas/TestSuiteStepDelay"

    TestSuiteStepExecuteTest:
      allOf:
        - $ref: "#/components/schemas/ObjectRef"

    TestSuiteStepDelay:
      type: object
      required:
        - duration
        - name
      properties:
        duration:
          type: integer
          default: 0
          description: delay duration in milliseconds

    TestSuiteExecution:
      type: object
      description: Test suite executions data
      required:
        - id
        - name
        - test
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        name:
          type: string
          description: "execution name"
        testSuite:
          $ref: "#/components/schemas/ObjectRef"
          description: object name and namespace
        status:
          $ref: "#/components/schemas/TestSuiteExecutionStatus"
        envs:
          type: object
          description: "environment variables passed to executor"
          additionalProperties:
            type: string
          example:
            record: "true"
            prefix: "some-"
        params:
          type: object
          description: "execution params passed to executor converted to vars for usage in tests"
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        startTime:
          type: string
          description: "test start time"
          format: date-time
        endTime:
          type: string
          description: "test end time"
          format: date-time
        duration:
          type: string
          description: "test duration"
        stepResults:
          type: array
          description: "steps execution restults"
          items:
            $ref: "#/components/schemas/TestSuiteStepExecutionResult"
            description: test execution results
        labels:
          type: object
          description: "test suite execution labels"
          additionalProperties:
            type: string
          example:
            env: "prod"
            app: "backend"

    TestSuiteExecutionStatus:
      type: string
      enum:
        - queued
        - pending
        - success
        - error

    TestSuiteStepExecutionResult:
      description: execution result returned from executor
      type: object
      required:
        - status
      properties:
        step:
          $ref: "#/components/schemas/TestSuiteStep"
        test:
          $ref: "#/components/schemas/ObjectRef"
          description: object name and namespace
        execution:
          $ref: "#/components/schemas/Execution"
          description: test step execution

    TestSuiteExecutionsResult:
      description: the result for a page of executions
      type: object
      required:
        - totals
        - results
      properties:
        totals:
          $ref: "#/components/schemas/ExecutionsTotals"
        filtered:
          $ref: "#/components/schemas/ExecutionsTotals"
        results:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteExecutionSummary"

    TestSuiteExecutionSummary:
      description: test execution summary
      type: object
      required:
        - id
        - name
        - testSuiteName
        - status
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        name:
          type: string
          description: execution name
        testSuiteName:
          type: string
          description: name of the test suite
        status:
          $ref: "#/components/schemas/TestSuiteExecutionStatus"
        startTime:
          type: string
          description: "test suite execution start time"
          format: date-time
        endTime:
          type: string
          description: "test suite execution end time"
          format: date-time
        duration:
          type: string
          description: "test suite execution duration"
        execution:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteStepExecutionSummary"

    TestSuiteStepExecutionSummary:
      description: test suite execution summary
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
        name:
          type: string
          description: execution name
        testName:
          type: string
          description: test name
        status:
          $ref: "#/components/schemas/ExecutionStatus"
        type:
          $ref: "#/components/schemas/TestSuiteStepType"

    Test:
      type: object
      properties:
        name:
          type: string
          description: test name
        namespace:
          type: string
          description: test namespace
        type:
          type: string
          description: test type
        content:
          $ref: "#/components/schemas/TestContent"
          description: test content
        created:
          type: string
          format: date-time
        labels:
          type: object
          description: "test labels"
          additionalProperties:
            type: string
          example:
            env: "prod"
            app: "backend"

    TestContent:
      type: object
      properties:
        type:
          type: string
          description: test type
          enum:
            - string
            - file-uri
            - git-file
            - git-dir
        repository:
          $ref: "#/components/schemas/Repository"
        data:
          type: string
          description: test content data as string
        uri:
          type: string
          description: test content

    Execution:
      type: object
      description: Test execution
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        testName:
          type: string
          description: unique test name (CRD Test name)
        testNamespace:
          type: string
          description: test namespace
        testType:
          type: string
          description: test type e.g. postman/collection
        name:
          type: string
          description: "execution name"
        envs:
          type: object
          description: "environment variables passed to executor"
          additionalProperties:
            type: string
          example:
            record: "true"
            prefix: "some-"
        args:
          type: array
          description: "additional arguments/flags passed to executor binary"
          example: ["--concurrency", "2", "--remote", "--some", "blabla"]
          items:
            type: string
        params:
          type: object
          description: "execution params passed to executor converted to vars for usage in tests"
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        paramsFile:
          type: string
          description: params file content - need to be in format for particular executor (e.g. postman envs file)
        content:
          $ref: "#/components/schemas/TestContent"
        startTime:
          type: string
          description: "test start time"
          format: date-time
        endTime:
          type: string
          description: "test end time"
          format: date-time
        duration:
          type: string
          description: "test duration"
        executionResult:
          required: true
          description: result get from executor
          $ref: "#/components/schemas/ExecutionResult"
        labels:
          type: object
          description: "execution labels"
          additionalProperties:
            type: string
          example:
            env: "prod"
            app: "backend"

    Artifact:
      type: object
      description: API server artifact
      properties:
        name:
          type: string
          description: artifact file path
        size:
          type: integer
          description: file size in bytes

    ExecutionsResult:
      description: the result for a page of executions
      type: object
      required:
        - totals
        - results
      properties:
        totals:
          $ref: "#/components/schemas/ExecutionsTotals"
        filtered:
          $ref: "#/components/schemas/ExecutionsTotals"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionSummary"

    ExecutionSummary:
      description: execution summary
      type: object
      required:
        - id
        - name
        - testName
        - testType
        - status
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        name:
          type: string
          description: execution name
        testName:
          type: string
          description: name of the test
        testNamespace:
          type: string
          description: name of the test
        testType:
          type: string
          description: the type of test for this execution
        status:
          $ref: "#/components/schemas/ExecutionStatus"
        startTime:
          type: string
          description: "test execution start time"
          format: date-time
        endTime:
          type: string
          description: "test execution end time"
          format: date-time

    ExecutionStatus:
      type: string
      enum:
        - queued
        - pending
        - success
        - error

    ExecutionResult:
      description: execution result returned from executor
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/ExecutionStatus"
        output:
          type: string
          description: "RAW Test execution output, depends of reporter used in particular tool"
        outputType:
          type: string
          description: "output type depends of reporter used in partucular tool"
          enum:
            - text/plain
            - application/junit+xml
            - application/json
        errorMessage:
          type: string
          description: "error message when status is error, separate to output as output can be partial in case of error"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionStepResult"
          description: execution steps (for collection of requests)

    ExecutionStepResult:
      description: execution result data
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: step name
        duration:
          type: string
          format: duration
        status:
          type: string
          description: execution step status
          enum: [success, error]
        assertionResults:
          type: array
          items:
            $ref: "#/components/schemas/AssertionResult"

    AssertionResult:
      description: execution result data
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [success, error]
        errorMessage:
          type: string
          nullable: true

    ExecutionsTotals:
      type: object
      description: various execution counters
      required:
        - results
        - passed
        - failed
        - queued
        - pending
      properties:
        results:
          type: integer
          description: the total number of executions available
        passed:
          type: integer
          description: the total number of passed executions available
        failed:
          type: integer
          description: the total number of failed executions available
        queued:
          type: integer
          description: the total number of queued executions available
        pending:
          type: integer
          description: the total number of running executions available

    ServerInfo:
      type: object
      description: Server information with build version, build commit etc.
      required:
        - version
      properties:
        version:
          type: string
          description: build version
        commit:
          type: string
          description: build commit

    Repository:
      description: repository representation for tests in git repositories
      type: object
      required:
        - type
        - uri
        - branch
      properties:
        type:
          type: string
          enum:
            - git
          description: VCS repository type
        uri:
          type: string
          description: uri of content file or git directory
        branch:
          type: string
          description: branch/tag name for checkout
        path:
          type: string
          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories
        username:
          type: string
          description: git auth username for private repositories
        token:
          type: string
          description: git auth token for private repositories

    ExecutionRequest:
      description: test execution request body
      type: object
      properties:
        name:
          type: string
          description: test execution custom name
          example: testing with 1000 users
        namespace:
          type: string
          description: test kubernetes namespace ("testkube" when not set)
          example: testkube
        paramsFile:
          type: string
          description: params file content - need to be in format for particular executor (e.g. postman envs file)
        params:
          type: object
          description: "execution params passed to executor"
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        args:
          type: array
          description: "additional executor binary arguments"
          items:
            type: string
          example:
            - "--repeats"
            - "5"
            - "--insecure"
        labels:
          type: object
          description: "execution labels"
          additionalProperties:
            type: string
          example:
            env: "prod"
            app: "backend"

    TestSuiteExecutionRequest:
      description: test suite execution request body
      type: object
      properties:
        name:
          type: string
          description: test execution custom name
          example: testing with 1000 users
        namespace:
          type: string
          description: test kubernetes namespace ("testkube" when not set)
          example: testkube
        params:
          type: object
          description: "execution params passed to executor"
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"

    TestUpsertRequest:
      description: test create request body
      allOf:
        - $ref: "#/components/schemas/Test"

    TestSuiteUpsertRequest:
      description: test create request body
      type: object
      required:
        - name
        - namespace
      allOf:
        - $ref: "#/components/schemas/TestSuite"
        - $ref: "#/components/schemas/ObjectRef"

    ExecutorCreateRequest:
      description: executor create request body
      type: object
      required:
        - name
        - namespace
        - types
      allOf:
        - $ref: "#/components/schemas/Executor"
        - $ref: "#/components/schemas/ObjectRef"

    # Copied from CRD spec
    # https://github.com/kubeshop/testkube-operator/blob/main/config/crd/bases/executor.kubtest.io_executors.yaml
    # TODO we need to sync those in some nice way
    Executor:
      description: CRD based executor data
      type: object
      properties:
        executorType:
          description:
            ExecutorType one of "rest" for rest openapi based executors
            or "job" which will be default runners for testkube soon
          type: string
        image:
          description: Image for kube-job
          type: string
        types:
          description: Types defines what types can be handled by executor e.g.
            "postman/collection", ":curl/command" etc
          items:
            type: string
          type: array
        uri:
          description: URI for rest based executors
          type: string
        jobTemplate:
          description: Job template to launch executor
          type: string        

    ExecutorDetails:
      description: Executor details with Executor data and additional information like list of executions
      type: object
      properties:
        name:
          description: Executor name
          type: string
        executor:
          $ref: "#/components/schemas/Executor"
        executions:
          $ref: "#/components/schemas/ExecutionsResult"

    ExecutorOutput:
      description: CRD based executor data
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: One of possible output types
          enum:
            - error
            - log
            - event
            - result
        content:
          type: string
          description: Message/event data passed from executor (like log lines etc)
          example:
        result:
          description: Execution result when job is finished
          $ref: "#/components/schemas/ExecutionResult"

    #
    # Errors
    #

    Problem:
      description: problem response in case of error
      type: object
      properties:
        type:
          type: string
          description: Type contains a URI that identifies the problem type. This URI will,
          example: http://kubeshop.io/testkube/problems/invalidtestname
        title:
          type: string
          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except forpurposes of localization.
          example: Invalid test name
        status:
          type: integer
          description: HTTP status code for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Your test name can't contain forbidden characters like "}}}" passed
        instance:
          type: string
          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.
          example: http://10.23.23.123:8088/tests

  #
  # Parameters
  #

  parameters:
    TestName:
      in: query
      name: test
      schema:
        type: string
        default: ""
      description: test namespaced name to filter
      required: false
    Type:
      in: query
      name: type
      schema:
        type: string
        default: ""
      description: object type
      required: false
    TextSearch:
      in: query
      name: textSearch
      schema:
        type: string
        default: ""
      description: text to search in name and test name
      required: false
    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 100
      description: the number of executions to get, setting to 0 will return only totals
      required: false
    PageIndex:
      in: query
      name: page
      schema:
        type: integer
        default: 0
      description: the page index to start at
      required: false
    StartDateFilter:
      in: query
      name: startDate
      schema:
        type: string
        format: date
      required: false
      description: startDate for filtering in ISO-8601 format, i.e. "yyyy-mm-dd"
    EndDateFilter:
      in: query
      name: endDate
      schema:
        type: string
        format: date
      required: false
      description: endDate for filtering
    TestExecutionsStatusFilter:
      in: query
      name: status
      schema:
        $ref: "#/components/schemas/TestSuiteExecutionStatus"
      description: optional status filter
      required: false
    ExecutionsStatusFilter:
      in: query
      name: status
      schema:
        $ref: "#/components/schemas/ExecutionStatus"
      description: optional status filter
      required: false
    Selector:
      in: query
      name: selector
      schema:
        type: string
        description: Labels to filter by
